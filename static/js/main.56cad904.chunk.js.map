{"version":3,"sources":["Deck.js","Hand.js","Results.js","App.js","index.js"],"names":["Deck","_this","this","deck_id","props","code","card","image","react_default","a","createElement","onClick","turnOverCard","src","height","width","alt","Component","Hand","cardsImages","cards","map","className","key","getHand","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","value","isNaN","parseInt","copyOfCards","toConsumableArray","i","length","val","sort","b","arr","target","result","j","push","charArray","suitsArray","suit","hand","toCheck","runLength","runFound","k","c","count","fullHand","convertToChars","uniqueSet","Set","uniqueValues","finalResult","countOcurrences","resultObj","resultLength","description","score","cardHand","arguments","undefined","convertToIntegers","twoSum","pairs","pairTarget","shift","triplets","start","p","temp","splice","copyOfHand","checkAllEqual","every","allEqual","pop","communitySuit","sortedCards","sortCards","runsResult","patternsOfFour","patternsOfThree","runOf5Found","runOf4Found","findRun","pairResult","fullSumsResult","nibsResult","console","log","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","flushResult","_this2","pairResults","_this$props","totalScore","getPairs","sumResultPairs","checkForFifteenPairs","sumResultTriplets","checkForFifteenTriplets","sumResultQuartets","checkForFifteenQuartets","sumResultQuintet","checkForFifteenQuintet","checkForFlush","checkForRuns","checkForNibs","concat","tallyTheScores","showResultsCheckbox","type","inline","checked","setState","style","display","App","bind","assertThisInitialized","deck","fetch","then","response","json","DeckId","_this3","url","crib","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"wOAmBeA,mLAhBJ,IAAAC,EAAAC,KACKC,EAAYD,KAAKE,MAAjBD,QACFE,EAAOH,KAAKE,MAAME,KAAKD,KACvBE,EAAQL,KAAKE,MAAME,KAAKC,MAE9B,OACAC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMV,EAAKG,MAAMQ,aAAa,CAACT,cAAhD,kBACAK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKG,IAAKN,EAAOO,OAAO,QAAQC,MAAM,QAAQC,IAAKX,aAV5CY,aCgBJC,mLAfJ,IAAAjB,EAAAC,KACKC,EAAYD,KAAKE,MAAjBD,QAEFgB,EADQjB,KAAKE,MAAMgB,MACCC,IAAI,SAAAf,GAC5B,OAAOE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OAAOT,IAAKP,EAAKC,MAAOgB,IAAKjB,EAAKD,KAAMW,IAAKV,EAAKD,KAAMS,OAAO,MAAMC,MAAM,UAEnG,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQY,UAAU,SAASX,QAAS,kBAAMV,EAAKG,MAAMoB,QAAQ,CAACrB,cAA9D,YACAK,EAAAC,EAAAC,cAAA,WAAMS,WAVCF,oBCshBJQ,cArhBb,SAAAA,EAAYrB,GAAO,IAAAH,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAAxB,KAAAuB,IACjBxB,EAAAyB,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5B,KAAME,KACD2B,MAAQ,CAACC,aAAa,GAFV/B,iFAMDmB,GAWhB,OAViBA,EAAMC,IAAI,SAAAf,GAAI,OAAIA,EAAK2B,QAEZZ,IAAI,SAAUf,GAMxC,OAJEA,EADE4B,MAAM5B,GACS,QAATA,EAAkB,EAAG,GAEtB6B,SAAS7B,EAAK,wCAQjBc,GAER,IADA,IAAIgB,EAAWV,OAAAW,EAAA,EAAAX,CAAON,GACbkB,EAAE,EAAGA,EAAIlB,EAAMmB,OAAQD,IAE9B,OAAOF,EAAYE,GAAGL,OACpB,IAAK,MACHG,EAAYE,GAAGE,IAAM,EACrB,MACF,IAAK,OACHJ,EAAYE,GAAGE,IAAM,GACrB,MACF,IAAK,QACHJ,EAAYE,GAAGE,IAAM,GACrB,MACF,IAAK,OACHJ,EAAYE,GAAGE,IAAM,GACrB,MACF,QACEJ,EAAYE,GAAGE,IAAML,SAASC,EAAYE,GAAGL,MAAM,IAIzD,OADAG,EAAYK,KAAK,SAAChC,EAAEiC,GAAH,OAAQjC,EAAE+B,IAAIE,EAAEF,MAC1BJ,iCAWJO,EAAKC,GAEX,IADA,IAAIC,EAAS,GACJP,EAAI,EAAGA,EAAIK,EAAIJ,OAAQD,IAC/B,IAAK,IAAIQ,EAAIR,EAAI,EAAGQ,EAAIH,EAAIJ,OAAQO,IAC/BH,EAAIL,GAAKK,EAAIG,KAAOF,GACnBC,EAAOE,KAAK,CAACT,EAAGQ,IAItB,OAAOD,yCAIMzB,GACb,IAAI4B,EAAY,GAIhB,OAHA5B,EAAMC,IAAI,SAAUf,GAClB,OAAO0C,EAAUD,KAAKzC,EAAK2B,SAEtBe,yCAIM5B,GACb,IAAI6B,EAAa,GAIjB,OAHA7B,EAAMC,IAAI,SAAUf,GAClB,OAAO2C,EAAWF,KAAKzC,EAAK4C,QAEvBD,kCAIDE,EAAMC,EAASC,GAErB,IADA,IAAIC,GAAW,EACNC,EAAE,EAAGA,EAAIF,EAAU,EAAGE,IAAK,CAEnB,IADFJ,EAAKC,EAAQG,EAAE,IAAIf,IAAIW,EAAKC,EAAQG,IAAIf,MAInDc,GAAW,GAGf,OAAOA,0CAGSX,EAAKa,GAEnB,IADA,IAAIC,EAAQ,EACHnB,EAAE,EAAGA,EAAEK,EAAIJ,OAAQD,IACtBK,EAAIL,KAAOkB,GACbC,IAGJ,OAAOA,mCAIAC,GAWP,IARA,IAAIV,EAAY9C,KAAKyD,eAAeD,GAE9BE,EAAY,IAAIC,IAAIb,GAGpBc,EAAYpC,OAAAW,EAAA,EAAAX,CAAOkC,GACrBG,EAAc,GAETzB,EAAE,EAAGA,EAAEwB,EAAavB,OAAQD,IAAK,CACxC,IAAIO,EAAS,GAEb,GADiB3C,KAAK8D,gBAAgBhB,EAAWc,EAAaxB,IAC7C,EAAG,CAElB,IAAK,IAAIiB,EAAE,EAAGA,EAAIP,EAAUT,OAAQgB,IAC9BO,EAAaxB,KAAKU,EAAUO,IAC9BV,EAAOE,KAAKW,EAASH,IAGzB,IAAIU,EAAY,GAChBA,EAAUpB,OAASA,EACnB,IAAIqB,EAAerB,EAAON,OACL,IAAjB2B,GACFD,EAAUE,YAAc,OACxBF,EAAUG,MAAQ,GAEM,IAAjBF,GACPD,EAAUE,YAAc,kBACxBF,EAAUG,MAAQ,GACQ,IAAjBF,IACTD,EAAUE,YAAc,iBACxBF,EAAUG,MAAQ,IAEpBL,EAAYhB,KAAKkB,IAGvB,OAAOF,+CAYYM,GAKnB,IALwC,IAAXzB,EAAW0B,UAAA/B,OAAA,QAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAEhCnB,EAAOjD,KAAKsE,kBAAkBH,GAC9BxB,EAAS3C,KAAKuE,OAAOtB,EAAKP,GAC1B8B,EAAQ,GACHpC,EAAE,EAAGA,EAAIO,EAAON,OAAQD,IAC/BoC,EAAM3B,KAAK,CAACsB,EAASxB,EAAOP,GAAG,IAAK+B,EAASxB,EAAOP,GAAG,MAEzD,OAAOoC,kDAWeL,GAAqB,IAAXzB,EAAW0B,UAAA/B,OAAA,QAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACnCnB,EAAOjD,KAAKsE,kBAAkBH,GAC9BM,EAAa/B,EAASO,EAAK,GAC/BA,EAAKyB,QAIL,IAHA,IAEIC,EAAW,GACN/B,EAAEgC,EAAShC,EAAGK,EAAKZ,OAAQO,IAAK,CAEvC,IADA,IAAID,EAAS3C,KAAKuE,OAAOtB,EAAKwB,GACrBI,EAAE,EAAGA,EAAGlC,EAAON,OAAQwC,IAAK,CACnC,IAAIC,EAAO,CAACX,EAASvB,EAAE,IACvBkC,EAAKjC,KAAKsB,EAASxB,EAAOkC,GAAG,GAAIjC,IACjCkC,EAAKjC,KAAKsB,EAASxB,EAAOkC,GAAG,GAAIjC,IACjC+B,EAAS9B,KAAKiC,GAEhBL,EAAa/B,EAASO,EAAK,GAC3BA,EAAKyB,QAEP,OAAOC,kDAYeR,GAGtB,IAH2C,IAAXzB,EAAW0B,UAAA/B,OAAA,QAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACnCP,EAAc,GACdZ,EAAOjD,KAAKsE,kBAAkBH,GACzB/B,EAAE,EAAGA,EAAIa,EAAKZ,OAAQD,IAAK,CAElC,GADQa,EAAK,GAAGA,EAAK,GAAGA,EAAK,GAAGA,EAAK,GAAGA,EAAK,GAAGA,EAAKb,KACzCM,EAAQ,CAClB,IAAIC,EAAMnB,OAAAW,EAAA,EAAAX,CAAO2C,GACjBxB,EAAOoC,OAAO3C,EAAE,GAChByB,EAAYhB,KAAKF,IAGrB,OAAOkB,iDAYcM,GAAqB,IAAXzB,EAAW0B,UAAA/B,OAAA,QAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAClCP,EAAc,GACdZ,EAAOjD,KAAKsE,kBAAkBH,GAKlC,OAJQlB,EAAK,GAAGA,EAAK,GAAGA,EAAK,GAAGA,EAAK,GAAGA,EAAK,KACjCP,GACVmB,EAAYhB,KAAKsB,GAEZN,wCASMM,GACZ,IAAMa,EAAUxD,OAAAW,EAAA,EAAAX,CAAO2C,GAEjBc,EAAgB,SAAAxC,GAAG,OAAIA,EAAIyC,MAAO,SAAA9E,GAAI,OAAIA,EAAK4C,OAASP,EAAI,GAAGO,QAEjEmC,EAAWF,EAAcD,GAC7B,OAAIG,EACKH,GAEPA,EAAWI,OACXD,EAAWF,EAAcD,IAEhBA,EAGJ,yCAII9D,EAAOd,GAGlB,IAFA,IAAIiF,EAAgBjF,EAAK4C,KACrBL,EAAS,GACJP,EAAE,EAAGA,EAAIlB,EAAMmB,OAAQD,IACP,SAAnBlB,EAAMkB,GAAGL,OAAoBb,EAAMkB,GAAGY,OAASqC,GACjD1C,EAAOE,KAAKzC,GAGhB,OAAOuC,uCASKwB,GA2BX,IA1BA,IAAImB,EAActF,KAAKuF,UAAUpB,GAC7BqB,EAAa,GAEXC,EAAiB,CACrB,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAGHC,EAAkB,CACtB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGLC,GAAc,EAGTvD,EAAE,EAAGA,EAAI,EAAGA,IACnB,GAAIkD,EAAYlD,EAAE,GAAGE,IAAIgD,EAAYlD,GAAGE,MAAQ,EAAI,CAClDqD,GAAc,EACd,MAKJ,IAAIC,GAAc,EAClB,IAAKD,EACH,IAAK,IAAIvD,EAAE,EAAGA,EAAGqD,EAAepD,OAAQD,IACtC,GAAIpC,KAAK6F,QAAQP,EAAaG,EAAerD,GAAI,GAAI,CAEnDoD,EAAW3C,KAAK,CAACyC,EAAYG,EAAerD,GAAG,IAAKkD,EAAYG,EAAerD,GAAG,IAAKkD,EAAYG,EAAerD,GAAG,IAAKkD,EAAYG,EAAerD,GAAG,MACxJwD,GAAc,EAMtB,IAAKA,EACH,IAAK,IAAIxD,EAAE,EAAGA,EAAGsD,EAAgBrD,OAAQD,IACnCpC,KAAK6F,QAAQP,EAAaI,EAAgBtD,GAAI,KAChDoD,EAAW3C,KAAK,CAACyC,EAAYI,EAAgBtD,GAAG,IAAKkD,EAAYI,EAAgBtD,GAAG,IAAKkD,EAAYI,EAAgBtD,GAAG,MACxHoD,EAAWvB,YAAY,OACvBuB,EAAWtB,MAAQ,GACL,GAIlB,OAAOsB,yCAIKM,EAAYC,EAAgBP,EAAYQ,GAErD,IADA,IAAI9B,EAAQ,EACH9B,EAAE,EAAGA,EAAI0D,EAAWzD,OAAQD,IACnC8B,GAAgB4B,EAAW1D,GAAG8B,MAEhC,IAAK,IAAI9B,EAAE,EAAGA,EAAI2D,EAAe1D,OAAQD,IACvC8B,GAAgB,EAElB,IAAK,IAAI9B,EAAE,EAAGA,EAAIoD,EAAWnD,OAAQD,IACnC8B,GAAgBsB,EAAWpD,GAAGC,OAMhC,OAJI2D,EAAW3D,OAAO,IACpB4D,QAAQC,IAAI,mCAAoCF,EAAW3D,QAC3D6B,GAAgB,GAEXA,mCAGD,IAIGiC,EAAcC,EAAaC,EAAaC,EAAcC,EAEtDR,EAAgBS,EAAahB,EAAYQ,EAN5CS,EAAAzG,KACG0G,EAAc,GADjBC,EAEsB3G,KAAKE,MAArBgB,EAFNyF,EAEMzF,MAAOd,EAFbuG,EAEavG,KAGV0B,EAAc9B,KAAK6B,MAAMC,YAEzB0B,EAAQhC,OAAAW,EAAA,EAAAX,CAAON,GACnBsC,EAASX,KAAKzC,GACd,IAAIwG,EAAa,EAEjB,GAAwB,IAApBpD,EAASnB,OAAe,CAC1BqE,EAAc1G,KAAK6G,SAASrD,GAC5ByC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,iCACZD,QAAQC,IAAIQ,GAIZ,IAAII,EAAiB9G,KAAK+G,qBAAqBvD,GAC/CyC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,6CACZD,QAAQC,IAAIY,GAEZ,IAAIE,EAAoBhH,KAAKiH,wBAAwBzD,GACrDyC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,oDACZD,QAAQC,IAAIc,GAGZ,IAAIE,EAAoBlH,KAAKmH,wBAAwB3D,GACrDyC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,oDACZD,QAAQC,IAAIgB,GAGZ,IAAIE,EAAmBpH,KAAKqH,uBAAuB7D,GACnDyC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,kDACZD,QAAQC,IAAIkB,GAGZZ,EAAcxG,KAAKsH,cAAc9D,GACjCyC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,uCACZD,QAAQC,IAAIM,GAEZhB,EAAaxF,KAAKuH,aAAa/D,GAC/ByC,QAAQC,IAAI,qBAAsB1C,GAClCyC,QAAQC,IAAI,uCACZD,QAAQC,IAAI,sBAAuBV,GACnCS,QAAQC,IAAIV,GAEZQ,EAAahG,KAAKwH,aAAatG,EAAOd,GACtC6F,QAAQC,IAAI,kBAAmBhF,GAC/B+E,QAAQC,IAAI,iBAAkB9F,GAC9B6F,QAAQC,IAAI,sBAAuBF,GACnCC,QAAQC,IAAI,sCACZD,QAAQC,IAAIF,GAKZD,EAAc,GAAA0B,OAAAjG,OAAAW,EAAA,EAAAX,CAAOsF,GAAPtF,OAAAW,EAAA,EAAAX,CAA2BwF,GAA3BxF,OAAAW,EAAA,EAAAX,CAAiD0F,GAAjD1F,OAAAW,EAAA,EAAAX,CAAuE4F,IACrFR,EAAa5G,KAAK0H,eAAehB,EAAaX,EAAgBP,EAAYQ,GAQ5E,IAAM2B,EAAuBrH,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBAC1Cd,EAAAC,EAAAC,cAAA,SAAOoH,KAAK,WAAWC,OAAO,OAAOC,QAAShG,EAAarB,QAAS,WAAOgG,EAAKsB,SAAS,CAACjG,aAAcA,OACxGxB,EAAAC,EAAAC,cAAA,4BAwED,OArEuB,IAApBgD,EAASnB,SACX8D,EAAe7F,EAAAC,EAAAC,cAAA,WAAMkG,EAAYvF,IAAI,SAAAwB,GAAM,OAC3CrC,EAAAC,EAAAC,cAAA,OAAMwH,MAAO,CAAEC,QAAUnG,EAAc,QAAU,SAC3CxB,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cACdd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBAAgBuB,EAAOA,OAAOxB,IAAI,SAAAf,GAAI,OACnDE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAeT,IAAKP,EAAKC,MAAOgB,IAAKjB,EAAKD,KAAMW,IAAKV,EAAKD,UAE3EG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAeuB,EAAOsB,YAArC,cAA6DtB,EAAOuB,aAM7EkC,EAAc9F,EAAAC,EAAAC,cAAA,WAAMuF,EAAe5E,IAAI,SAAAwB,GAAM,OAC3CrC,EAAAC,EAAAC,cAAA,OAAKwH,MAAO,CAAEC,QAAUnG,EAAc,QAAU,SAC5CxB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBAAgBuB,EAAOxB,IAAI,SAAAf,GAAI,OAC5CE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAeT,IAAKP,EAAKC,MAAOgB,IAAKjB,EAAKD,KAAMW,IAAKV,EAAKD,UAE3EG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAf,+BAMViF,EAAc/F,EAAAC,EAAAC,cAAA,WAAMgF,EAAWrE,IAAI,SAAAwB,GAAM,OACvCrC,EAAAC,EAAAC,cAAA,OAAKwH,MAAO,CAAEC,QAAUnG,EAAc,QAAU,SAC5CxB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBAAgBuB,EAAOxB,IAAI,SAAAf,GAAI,OAC5CE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAeT,IAAKP,EAAKC,MAAOgB,IAAKjB,EAAKD,KAAMW,IAAKV,EAAKD,UAE3EG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAf,iBAA4CuB,EAAON,cAM7DkE,EAAcjG,EAAAC,EAAAC,cAAA,WAAMwF,EAAW7E,IAAI,SAAAwB,GAAM,OACvCrC,EAAAC,EAAAC,cAAA,OAAKwH,MAAO,CAAEC,QAAUnG,EAAc,QAAU,SAC5CxB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAeT,IAAKgC,EAAOtC,MAAOgB,IAAKsB,EAAOxC,KAAMW,IAAK6B,EAAOxC,QAEjFG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAf,0BAMRkF,EADAE,EAAYnE,OAAS,EACN/B,EAAAC,EAAAC,cAAA,OAAKwH,MAAO,CAAEC,QAAUnG,EAAc,QAAU,SAC7DxB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBAAgBoF,EAAYrF,IAAI,SAAAf,GAAI,OACjDE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAeT,IAAKP,EAAKC,MAAOgB,IAAKjB,EAAKD,KAAMW,IAAKV,EAAKD,UAE3EG,EAAAC,EAAAC,cAAA,OAAKY,UAAU,eAAf,wBAKQd,EAAAC,EAAAC,cAAA,aAKK,IAApBgD,EAASnB,OACL/B,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,WAAMmH,GACJrH,EAAAC,EAAAC,cAAA,OAAKwH,MAAO,CAAEC,QAAUnG,EAAc,QAAU,SAC9CxB,EAAAC,EAAAC,cAAA,6BAAqBoG,IAEtBT,EACAC,EACAC,EACAC,EACAC,GAIFjG,EAAAC,EAAAC,cAAA,WACGmH,EACDrH,EAAAC,EAAAC,cAAA,yCA7gBSO,aC6HPmH,cAzHb,SAAAA,EAAYhI,GAAO,IAAAH,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAAxB,KAAAkI,IACfnI,EAAAyB,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAA0G,GAAAtG,KAAA5B,KAAME,KACDQ,aAAeX,EAAKW,aAAayH,KAAlB3G,OAAA4G,EAAA,EAAA5G,QAAA4G,EAAA,EAAA5G,CAAAzB,KACpBA,EAAKuB,QAAUvB,EAAKuB,QAAQ6G,KAAb3G,OAAA4G,EAAA,EAAA5G,QAAA4G,EAAA,EAAA5G,CAAAzB,KACfA,EAAK8B,MAAQ,CACXwG,KAAQ,IALKtI,mFASG,IAAA0G,EAAAzG,KAOhBsI,MADY,iEAEPC,KAAK,SAAAC,GAAQ,OACZA,EAASC,SAEVF,KAAK,SAAA5F,GAGF8D,EAAKsB,SAAS,CACVM,KAAM1F,2CAKT+F,GAAQ,IAAAC,EAAA3I,KAEb4I,EAAM,uCAAyCF,EAAOzI,QAAU,iBACtEqI,MAAMM,GACDL,KAAK,SAAAC,GAAQ,OACVA,EAASC,SAEZF,KAAK,SAAA5F,GAKJgG,EAAKZ,SAAS,CACZc,KAAMlG,EAAOzB,8CAOXwH,GAOV1I,KAAK+H,SAAS,CACX9E,KAPa,CACd,CAAClB,MAAO,IAAK5B,KAAM,KAAME,MAAO,+CAAgD2C,KAAM,UACtF,CAACjB,MAAO,IAAK5B,KAAM,KAAME,MAAO,+CAAgD2C,KAAM,YACtF,CAACjB,MAAO,IAAK5B,KAAM,KAAME,MAAO,+CAAgD2C,KAAM,UACtF,CAACjB,MAAO,OAAQ5B,KAAM,KAAME,MAAO,+CAAgD2C,KAAM,4CAmBrF0F,GAAQ,IAAAI,EAAA9I,KAER4I,EAAM,uCAAyCF,EAAOzI,QAAU,iBACtEqI,MAAMM,GACDL,KAAK,SAAAC,GAAQ,OACVA,EAASC,SAEZF,KAAK,SAAA5F,GAKJsD,QAAQC,IAAI,kBAAmBvD,EAAOzB,OACtC4H,EAAKf,SAAS,CACX9E,KAAMN,EAAOzB,2CAKf,IAGDd,EAOAc,EATGjB,EAAWD,KAAK6B,MAAMwG,KAAtBpI,QAgBP,OAZEG,EADEJ,KAAK6B,MAAMgH,KACN7I,KAAK6B,MAAMgH,KAAK,GAEhB,GAKP3H,EADElB,KAAK6B,MAAMoB,KACLjD,KAAK6B,MAAMoB,KAEX,GAIN3C,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACXd,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAACuI,EAAD,CAAM9I,QAASA,EAASqB,QAAStB,KAAKsB,QAASJ,MAAOA,IACtDZ,EAAAC,EAAAC,cAACwI,EAAD,CAAM/I,QAASA,EAASS,aAAcV,KAAKU,aAAcN,KAAMA,IAC/DE,EAAAC,EAAAC,cAACyI,EAAD,CAAS/H,MAAOA,EAAOd,KAAMA,YApH3BW,mBCAlBmI,IAASC,OAAO7I,EAAAC,EAAAC,cAAC4I,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.56cad904.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const code = this.props.card.code\r\n        const image = this.props.card.image\r\n\r\n        return (\r\n        <div>\r\n          <button onClick={() => this.props.turnOverCard({deck_id})}>Community card</button>\r\n          <div>\r\n            <img src={image} height='180px' width='128px' alt={code}/ >\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const cards = this.props.cards\r\n        const cardsImages = cards.map(card => {\r\n          return <img className='hand' src={card.image} key={card.code} alt={card.code} height=\"180\" width=\"128\"/>\r\n        })\r\n        return (\r\n          <div>\r\n            <button className='freddy' onClick={() => this.props.getHand({deck_id})}>Get Hand</button>\r\n            <div>{cardsImages}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hand\r\n","import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showResults: true}\r\n  }\r\n\r\n// helper function to convert the card.value into an integer\r\n  convertToIntegers(cards) {\r\n    var arrNoSuits = cards.map(card => card.value)\r\n    // change face cards and ace to numbers\r\n    var arrInteger = arrNoSuits.map(function (card) {\r\n      if (isNaN(card)) {\r\n        card = (card === 'ACE') ? 1 :10\r\n      } else {\r\n        card = parseInt(card,10)\r\n      }\r\n      return card\r\n    })\r\n    return arrInteger\r\n  }\r\n\r\n  // helper function to sort the cards and add 'val' property\r\n  sortCards(cards) {\r\n    let copyOfCards = [...cards]\r\n    for (let i=0; i < cards.length; i++) {\r\n\r\n      switch(copyOfCards[i].value) {\r\n        case 'ACE':\r\n          copyOfCards[i].val = 1;\r\n          break;\r\n        case 'JACK':\r\n          copyOfCards[i].val = 11;\r\n          break;\r\n        case 'QUEEN':\r\n          copyOfCards[i].val = 12;\r\n          break;\r\n        case 'KING':\r\n          copyOfCards[i].val = 13\r\n          break;\r\n        default:\r\n          copyOfCards[i].val = parseInt(copyOfCards[i].value,10);\r\n        }\r\n      }\r\n    copyOfCards.sort((a,b)=> a.val-b.val)\r\n    return copyOfCards\r\n  }\r\n\r\n  /**\r\n * Returns array of two numbers that sum to the target value\r\n * @param {number[]} arr - Array of integers\r\n * @param {number} target - Target value that the pairs should sum to\r\n * @return {Array<Array<number>>} Array of pairs of numbers where each number represents the poistion in the hand\r\n * @example [[1,2], [3,5], [4,5]]\r\n *\r\n */\r\ntwoSum(arr, target) {\r\n\tvar result = [];\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tfor (var j = i + 1; j < arr.length; j++) {\r\n\t\t\tif (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  return result;\r\n}\r\n\r\n// strip the cards array down to a simple array of characters\r\nconvertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function (card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// strip the cards array down to a simple array of suits\r\nconvertToSuits(cards) {\r\n  let suitsArray = []\r\n  cards.map(function (card) {\r\n    return suitsArray.push(card.suit)\r\n  })\r\n  return suitsArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\nfindRun(hand, toCheck, runLength) {\r\n  let runFound = true\r\n  for (let k=0; k < runLength-1; k++) {\r\n    let result = hand[toCheck[k+1]].val-hand[toCheck[k]].val\r\n    if (result === 1 ) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n  // quick and dirty way to count occurences of a character in an array\r\n  countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  // gets pairs, triplets and quartets of cards in a hand\r\n  getPairs(fullHand) {\r\n    //debugger\r\n    // reduce the array to an array of chars\r\n    let charArray = this.convertToChars(fullHand)\r\n    // creating aset removes duplicates.\r\n    const uniqueSet = new Set(charArray)\r\n    // turn set back to array so that we have an\r\n    // array of unique values in the hand\r\n    const uniqueValues = [...uniqueSet]\r\n    let finalResult = []\r\n    // looping through 3 values - a, j and 3\r\n    for (let i=0; i<uniqueValues.length; i++) {\r\n      let result = []\r\n      let occurences = this.countOcurrences(charArray, uniqueValues[i])\r\n      if (occurences > 1) {\r\n        // get index of each one\r\n        for (let k=0; k < charArray.length; k++) {\r\n          if (uniqueValues[i]===charArray[k]) {\r\n            result.push(fullHand[k])\r\n          }\r\n        }\r\n        let resultObj = {}\r\n        resultObj.result = result\r\n        let resultLength = result.length\r\n        if (resultLength === 2 ) {\r\n          resultObj.description = 'Pair'\r\n          resultObj.score = 2\r\n        }\r\n        else if (resultLength === 3 ) {\r\n          resultObj.description = 'Three of a kind'\r\n          resultObj.score = 6\r\n        } else if (resultLength === 4 ) {\r\n          resultObj.description = 'Four of a kind'\r\n          resultObj.score = 12\r\n        }\r\n        finalResult.push(resultObj)\r\n      }\r\n    }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\ncheckForFifteenPairs(cardHand, target=15) {\r\n  // debugger\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let result = this.twoSum(hand,target)\r\n  let pairs = []\r\n  for (var i=0; i < result.length; i++) {\r\n    pairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return pairs\r\n}\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\ncheckForFifteenTriplets(cardHand, target=15) {\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0;\r\n  // let intermediateResult = []\r\n  let triplets = []\r\n  for (let j=start+1; j< hand.length; j++) {\r\n    let result = this.twoSum(hand,pairTarget)\r\n    for (var p=0; p <result.length; p++) {\r\n      let temp = [cardHand[j-1]]\r\n      temp.push(cardHand[result[p][0] +j])\r\n      temp.push(cardHand[result[p][1] +j])\r\n      triplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return triplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuartets(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  for (let i=0; i < hand.length; i++) {\r\n    let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]-hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i,1)\r\n      finalResult.push(result)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuintet(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]\r\n  if (sum === target) {\r\n    finalResult.push(cardHand)\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\n checkForFlush(cardHand) {\r\n   const copyOfHand = [...cardHand]\r\n   // check for five card flush (all suits are equal)\r\n   const checkAllEqual = arr => arr.every( card => card.suit === arr[0].suit )\r\n\r\n   let allEqual = checkAllEqual(copyOfHand)\r\n   if (allEqual) {\r\n     return copyOfHand\r\n   } else { // check for flush in forst four cards\r\n     copyOfHand.pop()\r\n     allEqual = checkAllEqual(copyOfHand)\r\n     if (allEqual) {\r\n       return copyOfHand\r\n     }\r\n   }\r\n   return []\r\n }\r\n\r\n // checks if the hand as a Jack that matches the suit of the community card\r\n checkForNibs(cards, card) {\r\n   let communitySuit = card.suit\r\n   let result = []\r\n   for (let i=0; i < cards.length; i++ ) {\r\n     if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n       result.push(card)\r\n     }\r\n   }\r\n   return result\r\n }\r\n\r\n /**\r\n  * Returns sets of three, four or five cards that are sequential ie; a run\r\n  * @param {string[]} cardHand - Array of cardes\r\n  * @return {Array<Array<Card>>} Array of Cards representing a run\r\n  *\r\n  */\r\n  checkForRuns(cardHand) {\r\n    let sortedCards = this.sortCards(cardHand)\r\n    let runsResult = []\r\n    // all 4 combinations that a run of 4 can have\r\n    const patternsOfFour = [\r\n      [0,1,2,3],\r\n      [0,1,2,4],\r\n      [0,1,3,4],\r\n      [0,2,3,4],\r\n      [1,2,3,4]\r\n    ]\r\n    // all 9 combinations that a run of three can have\r\n    const patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4]\r\n    ]\r\n\r\n    let runOf5Found = true\r\n\r\n    // start by looking for runs of 5\r\n    for (let i=0; i < 4; i++) {\r\n      if (sortedCards[i+1].val-sortedCards[i].val !== 1 ) {\r\n        runOf5Found = false\r\n        break\r\n      }\r\n    }\r\n\r\n    // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n    let runOf4Found = false\r\n    if (!runOf5Found) {\r\n      for (let i=0; i< patternsOfFour.length; i++) {\r\n        if (this.findRun(sortedCards, patternsOfFour[i], 4)) {\r\n          let test = '33'\r\n          runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n          runOf4Found = true\r\n        }\r\n      }\r\n    }\r\n    // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  let runOf3Found = false\r\n  if (!runOf4Found) {\r\n    for (let i=0; i< patternsOfThree.length; i++) {\r\n      if (this.findRun(sortedCards, patternsOfThree[i], 3)) {\r\n        runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n        runsResult.description='fred'\r\n        runsResult.score = 3\r\n        runOf3Found = true\r\n      }\r\n    }\r\n  }\r\n    return runsResult\r\n  }\r\n\r\n\r\n tallyTheScores(pairResult, fullSumsResult, runsResult, nibsResult) {\r\n   let score = 0\r\n   for (let i=0; i < pairResult.length; i++) {\r\n     score = score + pairResult[i].score\r\n   }\r\n   for (let i=0; i < fullSumsResult.length; i++) {\r\n     score = score + 2\r\n   }\r\n   for (let i=0; i < runsResult.length; i++) {\r\n     score = score + runsResult[i].length\r\n   }\r\n   if (nibsResult.length>0) {\r\n     console.log('PPPPPPPPPPPPP added a nib score ', nibsResult.length)\r\n     score = score + 1\r\n   }\r\n   return score\r\n }\r\n\r\nrender() {\r\n        let pairResults = []\r\n        const {cards, card}  = this.props\r\n\r\n        let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n        let showResults = this.state.showResults\r\n        let fullSumsResult, flushResult, runsResult, nibsResult\r\n        let fullHand = [...cards]\r\n        fullHand.push(card)\r\n        let totalScore = 0\r\n\r\n        if (fullHand.length === 5 ) {\r\n          pairResults = this.getPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** P A I R  T E S T I N G')\r\n          console.log(pairResults)\r\n\r\n          // T H I S   I S  T H E   P R O B L E M\r\n          //let sumResultPairs = []\r\n          let sumResultPairs = this.checkForFifteenPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - P A I R S ')\r\n          console.log(sumResultPairs)\r\n\r\n          let sumResultTriplets = this.checkForFifteenTriplets(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - T R I P L E T S  ')\r\n          console.log(sumResultTriplets)\r\n\r\n          // let sumResultQuartets = []\r\n          let sumResultQuartets = this.checkForFifteenQuartets(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U A R T E T S  ')\r\n          console.log(sumResultQuartets)\r\n\r\n          //let sumResultQuintet = []\r\n          let sumResultQuintet = this.checkForFifteenQuintet(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U I N T E T  ')\r\n          console.log(sumResultQuintet)\r\n\r\n          //let sumResultQuintet = []\r\n          flushResult = this.checkForFlush(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** F L U S H   T E S T I N G   ')\r\n          console.log(flushResult)\r\n\r\n          runsResult = this.checkForRuns(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('******  R U N S    T E S T I N G   ')\r\n          console.log('======> runsResult ', runsResult)\r\n          console.log(runsResult)\r\n\r\n          nibsResult = this.checkForNibs(cards, card)\r\n          console.log('======> cards: ', cards)\r\n          console.log('======> card: ', card)\r\n          console.log('======> nibsResult ', nibsResult)\r\n          console.log('******  N I B S   T E S T I N G   ')\r\n          console.log(nibsResult)\r\n\r\n\r\n\r\n          // add all the results of the sums\r\n          fullSumsResult = [...sumResultPairs,  ...sumResultTriplets, ...sumResultQuartets, ...sumResultQuintet]\r\n          totalScore = this.tallyTheScores(pairResults, fullSumsResult, runsResult, nibsResult)\r\n\r\n        }\r\n        // // temp // TODO:\r\n        // if (!pairResults) {\r\n        //   pairResults = []\r\n        // }\r\n\r\n        const showResultsCheckbox =  <div className='show-results'>\r\n          <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n          <div>Show results</div>\r\n        </div>\r\n\r\n        if (fullHand.length === 5) {\r\n          displayPairs = <div>{pairResults.map(result =>\r\n          <div  style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                <div className='result-row'>\r\n                 <div className='result-image'>{result.result.map(card =>\r\n                   <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                 )}</div>\r\n                 <div className='result-text'>{result.description} - Points: {result.score}</div>\r\n                 </div>\r\n                 </ul>\r\n          </div>\r\n        )}</div>\r\n\r\n        displaySums = <div>{fullSumsResult.map(result =>\r\n          <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <ul>\r\n                 <div className='result-row'>\r\n                   <div className='result-image'>{result.map(card =>\r\n                     <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                   )}</div>\r\n                   <div className='result-text'>Sum to 15 - Points: 2</div>\r\n                 </div>\r\n              </ul>\r\n            </div>\r\n         )}</div>\r\n\r\n         displayRuns = <div>{runsResult.map(result =>\r\n           <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{result.map(card =>\r\n                      <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                    )}</div>\r\n                    <div className='result-text'>Run - Points: {result.length}</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n          )}</div>\r\n\r\n          displayNibs = <div>{nibsResult.map(result =>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                   <div className='result-row'>\r\n                     <div className='result-image'>\r\n                       <img className='hand-results' src={result.image} key={result.code} alt={result.code}/>\r\n                     </div>\r\n                     <div className='result-text'>Nibs - Points: 1</div>\r\n                   </div>\r\n                </ul>\r\n              </div>\r\n           )}</div>\r\n         if (flushResult.length > 0) {\r\n             displayFlush = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{flushResult.map(card =>\r\n                      <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                    )}</div>\r\n                    <div className='result-text'>Flush - Points: 5</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n           } else {\r\n             displayFlush = <div/>\r\n           }\r\n         }\r\n\r\n\r\n         if (fullHand.length === 5 ) {\r\n          return <div>\r\n          <div>{showResultsCheckbox}</div>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <h3>Result: Score = {totalScore}</h3>\r\n            </div>\r\n            {displayPairs}\r\n            {displaySums}\r\n            {displayRuns}\r\n            {displayFlush}\r\n            {displayNibs}\r\n          </div>\r\n       } else {\r\n         return (\r\n           <div>\r\n             {showResultsCheckbox}\r\n             <div>Nothing to display</div>\r\n           </div>\r\n\r\n         )\r\n       }\r\n\r\n    }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.turnOverCard = this.turnOverCard.bind(this)\r\n      this.getHand = this.getHand.bind(this)\r\n      this.state = {\r\n        'deck': []\r\n        //'showResults': false\r\n      }\r\n    }\r\n    componentDidMount() {\r\n        // const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\r\n        // console.log(\"Look at me. I mounted!!\")\r\n\r\n\r\n        // temporarily removed this to save bandwidth and resue the same deck\r\n        const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n                // console.log('STATE1111', this.state)\r\n                // console.log('BBBBBBB ', result)\r\n                this.setState({\r\n                    deck: result\r\n                })\r\n            })\r\n    }\r\n\r\n    turnOverCard(DeckId) {\r\n      // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET Crib state', this.state)\r\n            // console.log('GT Crib result ', result)\r\n            //console.log('CCCCCCC ', this)\r\n            // console.log('GET Crib cards', result.cards[0])\r\n            this.setState({\r\n              crib: result.cards\r\n              //crib: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n            })\r\n          });\r\n    }\r\n\r\n    // // fake results of a pair\r\n    getHandTemp(DeckId) {\r\n      const results = [\r\n        {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png', suit: 'HEARTS'},\r\n        {value: '5', code: '5d', image: 'https://deckofcardsapi.com/static/img/5D.png', suit: 'DIAMONDS'},\r\n        {value: '5', code: '5s', image: 'https://deckofcardsapi.com/static/img/5S.png', suit: 'SPADES'},\r\n        {value: 'JACK', code: 'jc', image: 'https://deckofcardsapi.com/static/img/JC.png', suit: 'CLUBS'},\r\n      ]\r\n      this.setState({\r\n         hand: results\r\n      })\r\n    }\r\n\r\n/*\r\n * [cards]\r\n * card.code        eg. JS, AD, 9H\r\n * card.image       eg.\r\n * card.cardsImages\r\n * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n * card.value       eg. JACK, ACE, 9\r\n * card.code        eg.\r\n *\r\n *\r\n *\r\n */\r\n    getHand(DeckId) {\r\n      // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET HAND state', this.state)\r\n            // console.log('GET HAND result ', result)\r\n            // console.log('CCCCCCC ')\r\n            // console.log('GET HAND cards1', result)\r\n            console.log('GET HAND cards2', result.cards)\r\n            this.setState({\r\n               hand: result.cards\r\n            })\r\n          });\r\n    }\r\n\r\n    render() {\r\n        const {deck_id} = this.state.deck;\r\n\r\n        let card\r\n        if (this.state.crib) {\r\n          card = this.state.crib[0]\r\n        } else {\r\n          card = {}\r\n        }\r\n\r\n        let cards\r\n        if (this.state.hand) {\r\n          cards = this.state.hand\r\n        } else {\r\n          cards = []\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Cribbage Hand Tester</h1>\r\n                <p>Guess how many points this hand is worth.</p>\r\n                <Hand deck_id={deck_id} getHand={this.getHand} cards={cards}/>\r\n                <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card}/>\r\n                <Results cards={cards} card={card}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}