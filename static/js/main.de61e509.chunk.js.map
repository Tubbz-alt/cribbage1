{"version":3,"sources":["Deck.js","Hand.js","Results.js","App.js","index.js"],"names":["Deck","_this","this","deck_id","props","code","card","image","react_default","a","createElement","onClick","turnOverCard","src","height","width","alt","Component","Hand","cardsImages","cards","map","className","key","getHand","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","arr","arrInteger","value","isNaN","parseInt","console","log","target","result","i","length","j","push","charArray","c","count","hand","fullHand","uniqueSet","Set","uniqueValues","toConsumableArray","finalResult","tempResult","countOcurrences","k","cardHand","arguments","undefined","convertToIntegers","twoSum","pairs","pairTarget","shift","triplets","start","p","temp","sum","splice","_this2","pairResults","_this$props","convertToChars","getPairs","sumResultPairs","checkForFifteenPairs","sumResultTriplets","checkForFifteenTriplets","sumResultQuartets","checkForFifteenQuartets","sumResultQuintet","checkForFifteenQuintet","fullSumsResult","concat","showResultsCheckbox","type","inline","checked","setState","displayPairs","style","display","displaySums","App","bind","assertThisInitialized","deck","fetch","then","response","json","DeckId","_this3","url","crib","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.de61e509.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const code = this.props.card.code\r\n        const image = this.props.card.image\r\n\r\n        return (\r\n        <div>\r\n          <button onClick={() => this.props.turnOverCard({deck_id})}>Turn over card</button>\r\n          <div>\r\n            <img src={image} height='180px' width='128px' alt={code}/ >\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const cards = this.props.cards\r\n        const cardsImages = cards.map(card => {\r\n          return <img className='hand' src={card.image} key={card.code} alt={card.code} height=\"180\" width=\"128\"/>\r\n        })\r\n        return (\r\n          <div>\r\n            <button onClick={() => this.props.getHand({deck_id})}>Get Hand</button>\r\n            <div>{cardsImages}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hand\r\n","import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showResults: true}\r\n  }\r\n  // remove the suits as they are not required for caluculatin sums\r\n  convertToIntegers(arr) {\r\n    var arrNoSuits = arr.map(card => card.value)\r\n    // console.log('111111111 ', arrNoSuits)\r\n    // change face cards and ace to numbers\r\n    var arrInteger = arrNoSuits.map(function (card) {\r\n      if (isNaN(card)) {\r\n        card = (card === 'ACE') ? 1 :10\r\n      } else {\r\n        card = parseInt(card,10)\r\n      }\r\n      return card\r\n    })\r\n    console.log('222222222 ', arrInteger)\r\n    return arrInteger\r\n  }\r\n\r\n  /**\r\n * Returns sets of two numbers that sum to the target value\r\n * @param {number[]} arr - Array of integers\r\n * @param {number} target - Target value that the pairs should sum to\r\n * @return {Array<Array<number>>} Array of pairs of numbers\r\n * @example\r\n * []\r\n *\r\n */\r\ntwoSum(arr, target) {\r\n\tvar result = [];\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tfor (var j = i + 1; j < arr.length; j++) {\r\n\t\t\tif (arr[i] + arr[j] === target) {\r\n\t\t\t\t// console.log(i,j)\r\n        result.push([i, j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n  // strip the cards array down to a simple array of characters\r\n  convertToChars(cards) {\r\n    let charArray = []\r\n    cards.map(function (card) {\r\n      return charArray.push(card.value)\r\n    })\r\n    return charArray\r\n  }\r\n\r\n  // quick and dirty way to count occurences of a character in an array\r\n  countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  // gets pairs, triplets and quartets of cards in a hand\r\n  getPairs(hand, fullHand) {\r\n    console.log('Getting results... ', fullHand)\r\n    // creating aset removes duplicates.\r\n    const uniqueSet = new Set(hand)\r\n    console.log('AAAAAAA ', uniqueSet)\r\n    // turn set back to array so that we have an\r\n    // array of unique values in the hand\r\n    const uniqueValues = [...uniqueSet]\r\n    let finalResult = []\r\n    // looping through 3 values - a, j and 3\r\n    for (let i=0; i<uniqueValues.length; i++) {\r\n      let tempResult = []\r\n      let occurences = this.countOcurrences(hand, uniqueValues[i])\r\n      if (occurences > 1) {\r\n        // get index of each one\r\n        for (let k=0; k < hand.length; k++) {\r\n          if (uniqueValues[i]===hand[k]) {\r\n            tempResult.push(fullHand[k])\r\n          }\r\n        }\r\n      finalResult.push(tempResult)\r\n      }\r\n  }\r\n  console.log('ZZZZZZZZ ', finalResult)\r\n  return finalResult\r\n}\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\ncheckForFifteenPairs(cardHand, target=15) {\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let result = this.twoSum(hand,target)\r\n  let pairs = []\r\n  for (var i=0; i < result.length; i++) {\r\n    pairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return pairs\r\n}\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\ncheckForFifteenTriplets(cardHand, target=15) {\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0;\r\n  // let intermediateResult = []\r\n  let triplets = []\r\n  for (let j=start+1; j< hand.length; j++) {\r\n    // console.log('Checking with: ', hand, 'with target: ',target)\r\n    let result = this.twoSum(hand,pairTarget)\r\n    for (var p=0; p <result.length; p++) {\r\n      let temp = [cardHand[j-1]]\r\n      temp.push(cardHand[result[p][0] +j])\r\n      temp.push(cardHand[result[p][1] +j])\r\n      triplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return triplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuartets(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  for (let i=0; i < hand.length; i++) {\r\n    let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]-hand[i]\r\n    console.log('=======> comparing ' + sum + ' to ' + target)\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i,1)\r\n      finalResult.push(result)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuintet(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]\r\n  if (sum === target) {\r\n    finalResult.push(cardHand)\r\n  }\r\n  return finalResult\r\n}\r\n\r\nrender() {\r\n        let pairResults = []\r\n        const { cards, card } = this.props;\r\n        let showResults = this.state.showResults\r\n\r\n        let fullHand = [...cards]\r\n        fullHand.push(card)\r\n\r\n        let charArray = this.convertToChars(fullHand)\r\n        pairResults = this.getPairs(charArray, fullHand)\r\n        console.log('****** P A I R  T E S T I N G')\r\n        console.log(pairResults)\r\n\r\n        let sumResultPairs = this.checkForFifteenPairs(fullHand)\r\n        console.log('****** S U M   T E S T I N G - P A I R S ')\r\n        console.log(sumResultPairs)\r\n\r\n        let sumResultTriplets = this.checkForFifteenTriplets(fullHand)\r\n        console.log('****** S U M   T E S T I N G - T R I P L E T S  ')\r\n        console.log(sumResultTriplets)\r\n\r\n        let sumResultQuartets = this.checkForFifteenQuartets(fullHand)\r\n        console.log('****** S U M   T E S T I N G - Q U A R T E T S  ')\r\n        console.log(sumResultQuartets)\r\n\r\n        let sumResultQuintet = this.checkForFifteenQuintet(fullHand)\r\n        console.log('****** S U M   T E S T I N G - Q U I N T E T  ')\r\n        console.log(sumResultQuintet)\r\n\r\n        console.log('sssssssss pairResults ', pairResults)\r\n        console.log('sssssssss ', sumResultPairs)\r\n        console.log('sssssssss ', sumResultTriplets)\r\n        console.log('sssssssss ', sumResultQuintet)\r\n        console.log('sssssssss ', sumResultQuintet)\r\n\r\n        // add all the results of the sums\r\n        let fullSumsResult = [...sumResultPairs,  ...sumResultTriplets, ...sumResultQuartets, ...sumResultQuintet]\r\n        console.log('TTTTTTTTTTTTTTT ', fullSumsResult)\r\n\r\n        // // temp // TODO:\r\n        // if (!pairResults) {\r\n        //   pairResults = []\r\n        // }\r\n\r\n        const showResultsCheckbox =  <div className='show-results'>\r\n          <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n          <div>Show results</div>\r\n        </div>\r\n        // const showResultsCheckbox =  <div className='show-results'>\r\n        //   <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n        //   <label>Show results</label>\r\n        // </div>\r\n\r\n        const displayPairs = <div>{pairResults.map(result =>\r\n          <div  style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                <div className='result-row'>\r\n                 <div className='result-image'>{result.map(card =>\r\n                   <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                 )}</div>\r\n                 <div className='result-text'>{(result.length === 2 ? 'Pair' : 'Triplet')} - Points: {result.length}</div>\r\n                 </div>\r\n                 </ul>\r\n          </div>\r\n        )}</div>\r\n\r\n        const displaySums = <div>{fullSumsResult.map(result =>\r\n          <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <ul>\r\n                 <div className='result-row'>\r\n                   <div className='result-image'>{result.map(card =>\r\n                     <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                   )}</div>\r\n                   <div className='result-text'>Sum to 15 - Points: {result.length}</div>\r\n                 </div>\r\n              </ul>\r\n            </div>\r\n         )}</div>\r\n\r\n\r\n//               xx<div style={{ display: (showResults ? 'block' : 'none') }}>\r\n\r\n        //check that hand has been delt\r\n         if (fullHand.length > 1 ) {\r\n          return <div>\r\n          <div>{showResultsCheckbox}</div>\r\n            {displayPairs}\r\n            {displaySums}\r\n          </div>\r\n       } else {\r\n         return (\r\n           <div>\r\n             {showResultsCheckbox}\r\n             <div>Nothing to display</div>\r\n           </div>\r\n\r\n         )\r\n       }\r\n\r\n    }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.turnOverCard = this.turnOverCard.bind(this)\r\n      this.getHand = this.getHand.bind(this)\r\n      this.state = {\r\n        'deck': []\r\n        //'showResults': false\r\n      }\r\n    }\r\n    componentDidMount() {\r\n        // const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\r\n        // console.log(\"Look at me. I mounted!!\")\r\n\r\n\r\n        // temporarily removed this to save bandwidth and resue the same deck\r\n        const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n                // console.log('STATE1111', this.state)\r\n                // console.log('BBBBBBB ', result)\r\n                this.setState({\r\n                    deck: result\r\n                })\r\n            })\r\n    }\r\n\r\n    turnOverCard(DeckId) {\r\n      // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET Crib state', this.state)\r\n            // console.log('GT Crib result ', result)\r\n            //console.log('CCCCCCC ', this)\r\n            // console.log('GET Crib cards', result.cards[0])\r\n            this.setState({\r\n              crib: result.cards\r\n              //crib: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n            })\r\n          });\r\n    }\r\n\r\n    // // fake results of a pair\r\n    getHand(DeckId) {\r\n      const results = [\r\n        {value: 'JACK', code: 'jh', image: 'https://deckofcardsapi.com/static/img/JH.png'},\r\n        {value: '5', code: '5d', image: 'https://deckofcardsapi.com/static/img/5D.png'},\r\n        {value: '5', code: '5s', image: 'https://deckofcardsapi.com/static/img/5S.png'},\r\n        {value: '5', code: '5c', image: 'https://deckofcardsapi.com/static/img/5C.png'}\r\n      ]\r\n      this.setState({\r\n         hand: results\r\n      })\r\n    }\r\n\r\n    getHandTemp(DeckId) {\r\n      // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET HAND state', this.state)\r\n            // console.log('GET HAND result ', result)\r\n            // console.log('CCCCCCC ')\r\n            // console.log('GET HAND cards1', result)\r\n            console.log('GET HAND cards2', result.cards)\r\n            this.setState({\r\n               hand: result.cards\r\n            })\r\n          });\r\n    }\r\n\r\n    render() {\r\n        const {deck_id} = this.state.deck;\r\n\r\n        let card\r\n        if (this.state.crib) {\r\n          card = this.state.crib[0]\r\n        } else {\r\n          card = {}\r\n        }\r\n\r\n        let cards\r\n        if (this.state.hand) {\r\n          cards = this.state.hand\r\n        } else {\r\n          cards = []\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Cribbage Hand Tester</h1>\r\n                <p>Guess how many points this hand is worth.</p>\r\n                <Hand deck_id={deck_id} getHand={this.getHand} cards={cards}/>\r\n                <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card}/>\r\n                <h3>Results</h3>\r\n                <Results cards={cards} card={card}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}