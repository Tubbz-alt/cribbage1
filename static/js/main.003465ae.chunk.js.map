{"version":3,"sources":["Deck.js","Hand.js","cribbage.js","Results.js","App.js","index.js"],"names":["Deck","props","cardImage","code","card","image","react_default","a","createElement","className","src","alt","onClick","turnOverCard","Hand","cardsImages","cards","buttonText","cardsLeft","length","map","key","getHand","patternsOfThree","patternsOfFour","convertToIntegers","value","isNaN","parseInt","twoSum","arr","target","arguments","undefined","result","i","j","push","findRun","hand","pattern","runFound","k","val","countOcurrences","c","count","getFifteenSums","sumPairs","cardHand","fifteenPairs","getFifteenPairs","sumTriplets","pairTarget","shift","fifteenTriplets","start","p","temp","getFifteenTriplets","sumQuartets","fifteenQuartets","sum","Object","toConsumableArray","splice","getFifteenQuartets","sumQuintet","fifteenQuartet","getFifteenQuintet","concat","getRuns","sortedCards","copyOfCards","sort","b","sortCards","runsResult","runOf5Found","runOf4Found","Results","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showResults","pairResult","sumsResult","flushResult","nibsResult","score","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","_this2","pairResults","_this$props","fullHand","totalScore","charArray","convertToChars","uniqueSet","Set","uniqueValues","finalResult","resultObj","resultLength","description","getPairs","console","log","copyOfHand","checkAllEqual","every","suit","allEqual","pop","getFlushes","communitySuit","getNibs","tallyTheScores","showResultsCheckbox","type","inline","checked","setState","style","display","Component","App","bind","assertThisInitialized","deck","communityCard","fetch","then","response","json","deck_id","remaining","_this3","url","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.003465ae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Component Deck\r\nconst Deck = (props) => {\r\n  // const deck_id = props.deck_id\r\n  const code = props.card.code\r\n  const image = props.card.image\r\n\r\n  let cardImage\r\n  if (image) {\r\n    cardImage = <div>\r\n      <img className='hand' src={image} alt={code} />\r\n    </div>\r\n  } else {\r\n    cardImage = <div>\r\n      <img className='hand' src='./card_back.jpg' alt={code} />\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => props.turnOverCard()}>Reveal New Card</button>\r\n      <div>Community Card</div>\r\n      {cardImage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Deck\r\n","import React from 'react';\r\n\r\n// Component Hand\r\nconst Hand = (props) => {\r\n  // const deck_id = props.deck_id\r\n  const cards = props.cards\r\n  const buttonText = props.buttonText\r\n  const cardsLeft = props.cardsLeft\r\n\r\n  let cardsImages\r\n  if (cards.length > 0) {\r\n    cardsImages = cards.map(card => {\r\n      return <img className='hand' src={card.image} key={card.code} alt={card.code} />\r\n    })\r\n  } else {\r\n    cardsImages =\r\n      <div>\r\n        <img className='hand' src='./card_back.jpg' alt='1' />\r\n        <img className='hand' src='./card_back.jpg' alt='2' />\r\n        <img className='hand' src='./card_back.jpg' alt='3' />\r\n        <img className='hand' src='./card_back.jpg' alt='4' />\r\n      </div>\r\n  }\r\n  return (\r\n    <div>\r\n      <button onClick={() => props.getHand()}>{buttonText}</button>\r\n      <div>Cards remaining in deck: {cardsLeft}</div>\r\n      <div>{cardsImages}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hand\r\n","\r\n// all 10 combinations that a run of three can have\r\nconst patternsOfThree = [\r\n  [0, 1, 2],  // First, second and third card\r\n  [0, 1, 3],  // First, second and fourth card\r\n  [1, 2, 3],  // Second, third and fourth card...\r\n  [0, 1, 4],\r\n  [0, 2, 4],\r\n  [1, 2, 4],\r\n  [0, 3, 4],\r\n  [1, 3, 4],\r\n  [2, 3, 4],\r\n  [0, 2, 3]\r\n]\r\n\r\n// all 4 combinations that a run of 4 can have\r\nconst patternsOfFour = [\r\n  [0, 1, 2, 3],\r\n  [0, 1, 2, 4],\r\n  [0, 1, 3, 4],\r\n  [0, 2, 3, 4],\r\n  [1, 2, 3, 4]\r\n]\r\n\r\n/**\r\n  * Converts each card to a simple integer\r\n  * ACE = 1, Facecards = 10\r\n  * @function convertToIntegers\r\n  * @param {Object[]} - Cards in the players hand\r\n  * @returns {number[]} - Array of numbers representing the cards\r\n  */\r\nfunction convertToIntegers(cards) {\r\n  var arrNoSuits = cards.map(card => card.value)\r\n  // change face cards and ace to numbers\r\n  var arrInteger = arrNoSuits.map(function(card) {\r\n    if (isNaN(card)) {\r\n      card = (card === 'ACE') ? 1 : 10\r\n    } else {\r\n      card = parseInt(card, 10)\r\n    }\r\n    return card\r\n  })\r\n  return arrInteger\r\n}\r\n\r\n/**\r\n  * Sorts the cards and adds 'val' property to represent the points value for each card.\r\n  * example: KING = 14, ACE = 1\r\n  * @function sortCards\r\n  *  @param {Object[]} - Cards in the players hand\r\n  *  @returns {Object[]} - Array of cards that are sorted and have numerica value added\r\n  */\r\nfunction sortCards(cards) {\r\n  let copyOfCards = [...cards]\r\n  for (let i = 0; i < cards.length; i++) {\r\n\r\n    switch (copyOfCards[i].value) {\r\n      case 'ACE':\r\n        copyOfCards[i].val = 1;\r\n        break;\r\n      case 'JACK':\r\n        copyOfCards[i].val = 11;\r\n        break;\r\n      case 'QUEEN':\r\n        copyOfCards[i].val = 12;\r\n        break;\r\n      case 'KING':\r\n        copyOfCards[i].val = 13\r\n        break;\r\n      default:\r\n        copyOfCards[i].val = parseInt(copyOfCards[i].value, 10);\r\n    }\r\n  }\r\n  copyOfCards.sort((a, b) => a.val - b.val)\r\n  return copyOfCards\r\n}\r\n\r\nexport function sumTwoNumbers(a, b) {\r\n  let sum = a + b\r\n  return sum\r\n}\r\n\r\n/**\r\n* Returns array of two number pairs of numbers that sum to the target value\r\n* @function twoSum\r\n* @param {number[]} - Array of integers\r\n* @param {number} - Target value that the pairs should sum to\r\n* @return {number[number[]]} Array of pairs of numbers where each number represents the poistion in the hand\r\n* @example [[1,2], [3,5], [4,5]]\r\n*/\r\nfunction twoSum(arr, target = 15) {\r\n  var result = [];\r\n  for (var i = 0; i < arr.length; i++) {\r\n    for (var j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n* Strips the card array down to a simple array of characters\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @return {number[]} - Character value of each card\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction convertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function(card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\n/**\r\n* Checks for a run in a given array of sorted cards\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @param {number[]} - Pattern of cards to check\r\n* @return {bolean} - Run was found. True/False\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction findRun(hand, pattern) {\r\n  let runFound = true\r\n  for (let k = 0; k < pattern.length - 1; k++) {\r\n    let result = hand[pattern[k + 1]].val - hand[pattern[k]].val\r\n    if (result === 1) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n// quick and dirty way to count occurences of a character in an array\r\nfunction countOcurrences(arr, c) {\r\n  let count = 0\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] === c) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n// gets pairs, triplets and quartets of cards in a hand\r\nexport function getPairs(fullHand) {\r\n  //debugger\r\n  // reduce the array to an array of chars\r\n  let charArray = convertToChars(fullHand)\r\n  // creating aset removes duplicates.\r\n  const uniqueSet = new Set(charArray)\r\n  // turn set back to array so that we have an\r\n  // array of unique values in the hand\r\n  const uniqueValues = [...uniqueSet]\r\n  let finalResult = []\r\n  // looping through 3 values - a, j and 3\r\n  for (let i = 0; i < uniqueValues.length; i++) {\r\n    let result = []\r\n    let occurences = countOcurrences(charArray, uniqueValues[i])\r\n    if (occurences > 1) {\r\n      // get index of each one\r\n      for (let k = 0; k < charArray.length; k++) {\r\n        if (uniqueValues[i] === charArray[k]) {\r\n          result.push(fullHand[k])\r\n        }\r\n      }\r\n      let resultObj = {}\r\n      resultObj.result = result\r\n      let resultLength = result.length\r\n      if (resultLength === 2) {\r\n        resultObj.description = 'Pair'\r\n        resultObj.score = 2\r\n      }\r\n      else if (resultLength === 3) {\r\n        resultObj.description = 'Three of a kind'\r\n        resultObj.score = 6\r\n      } else if (resultLength === 4) {\r\n        resultObj.description = 'Four of a kind'\r\n        resultObj.score = 12\r\n      }\r\n      finalResult.push(resultObj)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport function getFifteenSums(cards) {\r\n  let totalSums = []\r\n  let sumPairs = getFifteenPairs(cards, 15)\r\n  let sumTriplets = getFifteenTriplets(cards, 15)\r\n  let sumQuartets = getFifteenQuartets(cards, 15)\r\n  let sumQuintet = getFifteenQuintet(cards, 15)\r\n\r\n  totalSums = [...sumPairs, ...sumTriplets, ...sumQuartets, ...sumQuintet]\r\n  return totalSums\r\n}\r\n\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\nfunction getFifteenPairs(cardHand, target = 15) {\r\n  // debugger\r\n  let hand = convertToIntegers(cardHand)\r\n  let result = twoSum(hand, target)\r\n  let fifteenPairs = []\r\n  for (var i = 0; i < result.length; i++) {\r\n    fifteenPairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return fifteenPairs\r\n}\r\n\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\nfunction getFifteenTriplets(cardHand, target = 15) {\r\n  let hand = convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0;\r\n  // let intermediateResult = []\r\n  let fifteenTriplets = []\r\n  for (let j = start + 1; j < hand.length + 2; j++) {\r\n    let result = twoSum(hand, pairTarget)\r\n    for (var p = 0; p < result.length; p++) {\r\n      let temp = [cardHand[j - 1]]\r\n      temp.push(cardHand[result[p][0] + j])\r\n      temp.push(cardHand[result[p][1] + j])\r\n      fifteenTriplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return fifteenTriplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']]\r\n *\r\n */\r\nfunction getFifteenQuartets(cardHand, target = 15) {\r\n  let fifteenQuartets = []\r\n  let hand = convertToIntegers(cardHand)\r\n  for (let i = 0; i < hand.length; i++) {\r\n    let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4] - hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i, 1)\r\n      fifteenQuartets.push(result)\r\n    }\r\n  }\r\n  return fifteenQuartets\r\n}\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '2d', 'ad', 'as', 'ah']]\r\n *\r\n */\r\nfunction getFifteenQuintet(cardHand, target = 15) {\r\n  let fifteenQuartet = []\r\n  let hand = convertToIntegers(cardHand)\r\n  let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4]\r\n  if (sum === target) {\r\n    fifteenQuartet.push(cardHand)\r\n  }\r\n  return fifteenQuartet\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\nexport function getFlushes(cardHand) {\r\n  const copyOfHand = [...cardHand]\r\n  // check for five card flush (all suits are equal)\r\n  const checkAllEqual = arr => arr.every(card => card.suit === arr[0].suit)\r\n\r\n  let allEqual = checkAllEqual(copyOfHand)\r\n  if (allEqual) {\r\n    return copyOfHand\r\n  } else { // check for flush in forst four cards\r\n    copyOfHand.pop()\r\n    allEqual = checkAllEqual(copyOfHand)\r\n    if (allEqual) {\r\n      return copyOfHand\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\n// checks if the hand has a Jack that matches the suit of the community card\r\nexport function\r\n  getNibs(cards, card) {\r\n  let communitySuit = card.suit\r\n  let result = []\r\n  for (let i = 0; i < cards.length; i++) {\r\n    if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n      result.push(cards[i])\r\n      result.push(card)\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n     * Returns sets of three, four or five cards that are sequential ie; a run\r\n     * @param {string[]} cardHand - Array of cardes\r\n     * @return {Array<Array<Card>>} Array of Cards representing a run\r\n     *\r\n     */\r\nexport function getRuns(cardHand) {\r\n  let sortedCards = sortCards(cardHand)\r\n  let runsResult = []\r\n\r\n  let runOf5Found = true\r\n\r\n  // start by looking for runs of 5\r\n  for (let i = 0; i < 4; i++) {\r\n    if (sortedCards[i + 1].val - sortedCards[i].val !== 1) {\r\n      runOf5Found = false\r\n      break\r\n    }\r\n  }\r\n\r\n  // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n  let runOf4Found = false\r\n  if (!runOf5Found) {\r\n    for (let i = 0; i < patternsOfFour.length; i++) {\r\n      if (findRun(sortedCards, patternsOfFour[i])) {\r\n        runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n        runOf4Found = true\r\n      }\r\n    }\r\n  }\r\n  // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  if (!runOf4Found && !runOf5Found) {\r\n    for (let i = 0; i < patternsOfThree.length; i++) {\r\n      if (findRun(sortedCards, patternsOfThree[i])) {\r\n        runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n      }\r\n    }\r\n  }\r\n  return runOf5Found ? [sortedCards] : runsResult\r\n}\r\n","import React, { Component } from 'react';\r\nimport { getPairs, getFifteenSums, getFlushes, getNibs, getRuns } from './cribbage.js'\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showResults: true }\r\n    // this.personName = 'Fred'\r\n    // all 10 combinations that a run of three can have\r\n    this.patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4],\r\n      [0, 2, 3]\r\n    ]\r\n  }\r\n\r\n  // tallyTheScores(pairResult, fullSumsResult, runsResult, nibsResult) {\r\n  tallyTheScores(pairResult, sumsResult, runsResult, flushResult, nibsResult) {\r\n    let score = 0\r\n    for (let i = 0; i < pairResult.length; i++) {\r\n      score = score + pairResult[i].score\r\n    }\r\n    for (let i = 0; i < sumsResult.length; i++) {\r\n      score = score + 2\r\n    }\r\n    for (let i = 0; i < runsResult.length; i++) {\r\n      score = score + runsResult[i].length\r\n    }\r\n    if (flushResult.length > 0) {\r\n      score = score + flushResult.length\r\n    }\r\n    if (nibsResult.length > 0) {\r\n      score = score + 1\r\n    }\r\n    return score\r\n  }\r\n\r\n  render() {\r\n    let pairResults = []\r\n    const { cards, card } = this.props\r\n\r\n    let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n    let showResults = this.state.showResults\r\n    let sumsResult, flushResult, runsResult, nibsResult\r\n    let fullHand = [...cards]\r\n    fullHand.push(card)\r\n    let totalScore = 0\r\n\r\n    if (fullHand.length === 5) {\r\n      pairResults = getPairs(fullHand)\r\n      console.log('****** P A I R   R E S U L T S')\r\n      console.log(pairResults)\r\n\r\n      sumsResult = getFifteenSums(fullHand)\r\n      console.log('******  S U M   R E S U L T S')\r\n      console.log(sumsResult)\r\n\r\n      runsResult = getRuns(fullHand)\r\n      console.log('******  R U N S  R E S U L T S')\r\n      console.log('======> runsResult ', runsResult)\r\n      console.log(runsResult)\r\n\r\n      flushResult = getFlushes(fullHand)\r\n      console.log('****** F L U S H   R E S U L T S')\r\n      console.log(flushResult)\r\n\r\n      nibsResult = getNibs(cards, card)\r\n      console.log('******  N I B S   R E S U L T S')\r\n      console.log('======> nibsResult ', nibsResult)\r\n      console.log(nibsResult)\r\n\r\n      // add all the results of the sums\r\n      totalScore = this.tallyTheScores(pairResults, sumsResult, runsResult, flushResult, nibsResult)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const showResultsCheckbox = <div className='show-results'>\r\n      <input type='checkbox' inline='true' checked={showResults} onClick={() => { this.setState({ showResults: !showResults }) }} />\r\n      <div>Show results</div>\r\n    </div>\r\n\r\n    // Only show results if the full hand has been dealt\r\n    if (fullHand.length === 5) {\r\n      displayPairs = <div>{pairResults.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{result.result.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>{result.description} - Points: {result.score}</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n\r\n      displaySums = <div>{sumsResult.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{result.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Sum to 15 - Points: 2</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n\r\n      displayRuns = <div>{runsResult.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{result.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Run - Points: {result.length}</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n\r\n      if (nibsResult.length > 0) {\r\n        displayNibs = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{nibsResult.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Nibs - Points: 1</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      }\r\n      if (flushResult.length > 0) {\r\n        displayFlush = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{flushResult.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Flush - Points: {flushResult.length}</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      } else {\r\n        displayFlush = <div />\r\n      }\r\n    }\r\n\r\n    if (fullHand.length === 5) {\r\n      return <div>\r\n        <div>{showResultsCheckbox}</div>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <h3>Result: Score = {totalScore}</h3>\r\n        </div>\r\n        {displayPairs}\r\n        {displaySums}\r\n        {displayRuns}\r\n        {displayFlush}\r\n        {displayNibs}\r\n      </div>\r\n    } else {\r\n      return (\r\n        <div>\r\n          {showResultsCheckbox}\r\n          <div>Nothing to display</div>\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.turnOverCard = this.turnOverCard.bind(this)\r\n    this.getHand = this.getHand.bind(this)\r\n    this.state = {\r\n      'deck': [],\r\n      'hand': [],\r\n      'communityCard': '',\r\n      'cardsLeft': 52\r\n      //'showResults': false,\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        console.log('STATE1111', this.state)\r\n        console.log('BBBBBBB deck_id ', result.deck_id)\r\n        // handle error here TODO\r\n        // result.success hould be true\r\n        this.setState({\r\n          deck_id: result.deck_id,\r\n          cardsLeft: result.remaining\r\n        })\r\n      })\r\n  }\r\n\r\n  turnOverCard() {\r\n    // console.log('I am getting first card from the deck: ', deck_id)\r\n    const url = 'https://deckofcardsapi.com/api/deck/' + this.state.deck_id + '/draw/?count=1'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        // console.log('GET Crib state', this.state)\r\n        // console.log('GT Crib result ', result)\r\n        //console.log('CCCCCCC ', this)\r\n        // console.log('GET Crib cards', result.cards[0])\r\n        this.setState({\r\n          communityCard: result.cards[0],\r\n          cardsLeft: result.remaining\r\n          //communityCard: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n        })\r\n      });\r\n  }\r\n\r\n  // // fake results of a pair\r\n  getHandTemp() {\r\n    const results = [\r\n      { value: '4', code: '4c', image: 'https://deckofcardsapi.com/static/img/4C.png', suit: 'CLUBS' },\r\n      { value: '2', code: '2c', image: 'https://deckofcardsapi.com/static/img/2C.png', suit: 'CLUBS' },\r\n      { value: '5', code: '5c', image: 'https://deckofcardsapi.com/static/img/5C.png', suit: 'CLUBS' },\r\n      { value: '3', code: '3c', image: 'https://deckofcardsapi.com/static/img/3C.png', suit: 'CLUBS' },\r\n    ]\r\n    this.setState({\r\n      hand: results\r\n    })\r\n  }\r\n\r\n  /*\r\n   * [cards]\r\n   * card.code        eg. JS, AD, 9H\r\n   * card.image       eg.\r\n   * card.cardsImages\r\n   * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n   * card.value       eg. JACK, ACE, 9\r\n   * card.code        eg.\r\n   *\r\n   *\r\n   *\r\n   */\r\n  getHand() {\r\n    const url = 'https://deckofcardsapi.com/api/deck/' + this.state.deck_id + '/draw/?count=4'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        this.setState({\r\n          hand: result.cards,\r\n          cardsLeft: result.remaining\r\n        })\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // const deck_id = this.state.deck_id;\r\n    const cardsLeft = this.state.cardsLeft\r\n    let card\r\n    if (this.state.communityCard) {\r\n      card = this.state.communityCard\r\n    } else {\r\n      card = {}\r\n    }\r\n\r\n    let cards\r\n    if (this.state.hand) {\r\n      cards = this.state.hand\r\n    } else {\r\n      cards = []\r\n    }\r\n\r\n    let buttonText = ''\r\n    if (cardsLeft === 52) {\r\n      buttonText = 'Reveal Cards'\r\n    } else {\r\n      buttonText = 'Get new cards'\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Cribbage Hand Tester</h1>\r\n        <p>Guess how many points this hand is worth.</p>\r\n        <div className='result-row'>\r\n          <div className='full-hand-cards'>\r\n            <Hand getHand={this.getHand} cardsLeft={cardsLeft} cards={cards} buttonText={buttonText} />\r\n          </div>\r\n          <div className='full-hand-community-card'>\r\n            <Deck turnOverCard={this.turnOverCard} card={card} />\r\n          </div>\r\n        </div>\r\n        <Results cards={cards} card={card} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}