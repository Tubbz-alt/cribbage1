{"version":3,"sources":["Deck.js","Hand.js","Results.js","App.js","index.js"],"names":["Deck","_this","this","deck_id","props","code","card","image","react_default","a","createElement","onClick","turnOverCard","src","height","width","alt","Component","Hand","cardsImages","cards","map","className","key","getHand","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","charArray","push","value","arr","c","count","i","length","hand","fullHand","console","log","uniqueSet","Set","uniqueValues","toConsumableArray","finalResult","tempResult","countOcurrences","k","_this2","results","_this$props","convertToChars","getPairs","showResultsCheckbox","type","inline","checked","setState","result","style","display","App","bind","assertThisInitialized","deck","fetch","then","response","json","DeckId","_this3","url","crib","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7efb73a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const code = this.props.card.code\r\n        const image = this.props.card.image\r\n\r\n        return (\r\n        <div>\r\n          <button onClick={() => this.props.turnOverCard({deck_id})}>Turn over card</button>\r\n          <div>\r\n            <img src={image} height='228px' width='162px' alt={code}/ >\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const cards = this.props.cards\r\n        const cardsImages = cards.map(card => {\r\n          return <img className='hand' src={card.image} key={card.code} alt={card.code} height=\"228\" width=\"162\"/>\r\n        })\r\n        return (\r\n          <div>\r\n            <button onClick={() => this.props.getHand({deck_id})}>Get Hand</button>\r\n            <div>{cardsImages}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hand\r\n","import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showResults: true}\r\n  }\r\n  // strip the cards array down to a simple array of characters\r\n  convertToChars(cards) {\r\n    let charArray = []\r\n    cards.map(function (card) {\r\n      return charArray.push(card.value)\r\n    })\r\n    return charArray\r\n  }\r\n\r\n  // quick and dirty way to count occurences of a character in an array\r\n  countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  // gets pairs, triplets and quartets of cards in a hand\r\n  getPairs(hand, fullHand) {\r\n    console.log('Getting results... ', fullHand)\r\n    // creating aset removes duplicates.\r\n    const uniqueSet = new Set(hand)\r\n\r\n    // turn set back to array so that we have an\r\n    // array of unique values in the hand\r\n    const uniqueValues = [...uniqueSet]\r\n    let finalResult = []\r\n    // looping through 3 values - a, j and 3\r\n    for (let i=0; i<uniqueValues.length; i++) {\r\n      let tempResult = []\r\n      let occurences = this.countOcurrences(hand, uniqueValues[i])\r\n      if (occurences > 1) {\r\n        // get index of each one\r\n        for (let k=0; k < hand.length; k++) {\r\n          if (uniqueValues[i]===hand[k]) {\r\n            tempResult.push(fullHand[k])\r\n          }\r\n        }\r\n      finalResult.push(tempResult)\r\n      }\r\n  }\r\n  return finalResult\r\n}\r\n  render() {\r\n        let results = []\r\n        const { cards, card } = this.props;\r\n        let showResults = this.state.showResults\r\n\r\n        let fullHand = [...cards]\r\n        fullHand.push(card)\r\n\r\n        let charArray = this.convertToChars(fullHand)\r\n        results = this.getPairs(charArray, fullHand)\r\n\r\n        // temp // TODO:\r\n        if (!results) {\r\n          results = []\r\n        }\r\n\r\n        const showResultsCheckbox =  <div>\r\n          <label>Show results</label>\r\n          <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n        </div>\r\n\r\n        //check that hand has been delt\r\n         if (fullHand.length > 1 ) {\r\n          return results.map(result =>\r\n            <div>\r\n              <div>\r\n                <label>Show results</label>\r\n                <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n              </div>\r\n              <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                   {result.map(card =>\r\n                     <img className='hand' src={card.image} key={card.code} alt={card.code} height=\"114\" width=\"81\"/>\r\n                   )}\r\n                </ul>\r\n             </div>\r\n           </div>\r\n         )\r\n       } else {\r\n         return (\r\n           <div>\r\n           {showResultsCheckbox}\r\n             <div>Nothing to display</div>\r\n           </div>\r\n\r\n         )\r\n       }\r\n\r\n    }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.turnOverCard = this.turnOverCard.bind(this)\r\n      this.getHand = this.getHand.bind(this)\r\n      this.state = {\r\n        'deck': []\r\n        //'showResults': false\r\n      }\r\n    }\r\n    componentDidMount() {\r\n        // const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\r\n        // console.log(\"Look at me. I mounted!!\")\r\n\r\n\r\n        // temporarily removed this to save bandwidth and resue the same deck\r\n        const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n                // console.log('STATE1111', this.state)\r\n                // console.log('BBBBBBB ', result)\r\n                this.setState({\r\n                    deck: result\r\n                })\r\n            })\r\n    }\r\n\r\n    turnOverCard(DeckId) {\r\n      // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET Crib state', this.state)\r\n            // console.log('GT Crib result ', result)\r\n            //console.log('CCCCCCC ', this)\r\n            // console.log('GET Crib cards', result.cards[0])\r\n            this.setState({\r\n              crib: result.cards\r\n            })\r\n          });\r\n    }\r\n\r\n    getHand(DeckId) {\r\n      // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET HAND state', this.state)\r\n            // console.log('GET HAND result ', result)\r\n            // console.log('CCCCCCC ')\r\n            // console.log('GET HAND cards1', result)\r\n            // console.log('GET HAND cards2', result.cards)\r\n            this.setState({\r\n               hand: result.cards\r\n            })\r\n          });\r\n    }\r\n\r\n    render() {\r\n        const {deck_id} = this.state.deck;\r\n\r\n        let card\r\n        if (this.state.crib) {\r\n          card = this.state.crib[0]\r\n        } else {\r\n          card = {}\r\n        }\r\n\r\n        let cards\r\n        if (this.state.hand) {\r\n          cards = this.state.hand\r\n        } else {\r\n          cards = []\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Cribbage Hand Tester</h1>\r\n                <p>Guess how many points this hand is worth.</p>\r\n                <Hand deck_id={deck_id} getHand={this.getHand} cards={cards}/>\r\n                <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card}/>\r\n                <h3>Results</h3>\r\n                <Results cards={cards} card={card}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}