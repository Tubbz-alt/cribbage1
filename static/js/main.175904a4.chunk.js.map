{"version":3,"sources":["Deck.js","Hand.js","Results.js","App.js","index.js"],"names":["Deck","_this","this","deck_id","props","code","card","image","react_default","a","createElement","onClick","turnOverCard","src","height","width","alt","Component","Hand","cardsImages","cards","map","className","key","getHand","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","value","isNaN","parseInt","arr","target","result","i","length","j","push","charArray","suitsArray","suit","c","count","fullHand","convertToChars","uniqueSet","Set","uniqueValues","toConsumableArray","finalResult","countOcurrences","k","resultObj","resultLength","description","score","cardHand","arguments","undefined","hand","convertToIntegers","twoSum","pairs","pairTarget","shift","triplets","start","p","temp","splice","copyOfHand","console","log","checkAllEqual","every","allEqual","pop","pairResult","fullSumsResult","displayPairs","displaySums","displayFlush","flushResult","_this2","pairResults","_this$props","totalScore","getPairs","sumResultPairs","checkForFifteenPairs","sumResultTriplets","checkForFifteenTriplets","sumResultQuartets","checkForFifteenQuartets","sumResultQuintet","checkForFifteenQuintet","checkForFlush","concat","tallyTheScores","showResultsCheckbox","type","inline","checked","setState","style","display","App","bind","assertThisInitialized","deck","fetch","then","response","json","DeckId","_this3","url","crib","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.175904a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const code = this.props.card.code\r\n        const image = this.props.card.image\r\n\r\n        return (\r\n        <div>\r\n          <button onClick={() => this.props.turnOverCard({deck_id})}>Turn over card</button>\r\n          <div>\r\n            <img src={image} height='180px' width='128px' alt={code}/ >\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const cards = this.props.cards\r\n        const cardsImages = cards.map(card => {\r\n          return <img className='hand' src={card.image} key={card.code} alt={card.code} height=\"180\" width=\"128\"/>\r\n        })\r\n        return (\r\n          <div>\r\n            <button className='freddy' onClick={() => this.props.getHand({deck_id})}>Get Hand</button>\r\n            <div>{cardsImages}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hand\r\n","import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showResults: true}\r\n  }\r\n  // helper function to convert the card.value into an integer\r\n  convertToIntegers(cards) {\r\n    var arrNoSuits = cards.map(card => card.value)\r\n    // change face cards and ace to numbers\r\n    var arrInteger = arrNoSuits.map(function (card) {\r\n      if (isNaN(card)) {\r\n        card = (card === 'ACE') ? 1 :10\r\n      } else {\r\n        card = parseInt(card,10)\r\n      }\r\n      return card\r\n    })\r\n    return arrInteger\r\n  }\r\n\r\n  /**\r\n * Returns array of two numbers that sum to the target value\r\n * @param {number[]} arr - Array of integers\r\n * @param {number} target - Target value that the pairs should sum to\r\n * @return {Array<Array<number>>} Array of pairs of numbers where each number represents the poistion in the hand\r\n * @example [[1,2], [3,5], [4,5]]\r\n *\r\n */\r\ntwoSum(arr, target) {\r\n\tvar result = [];\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tfor (var j = i + 1; j < arr.length; j++) {\r\n\t\t\tif (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  return result;\r\n}\r\n\r\n// strip the cards array down to a simple array of characters\r\nconvertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function (card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// strip the cards array down to a simple array of suits\r\nconvertToSuits(cards) {\r\n  let suitsArray = []\r\n  cards.map(function (card) {\r\n    return suitsArray.push(card.suit)\r\n  })\r\n  return suitsArray\r\n}\r\n\r\n  // quick and dirty way to count occurences of a character in an array\r\n  countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  // gets pairs, triplets and quartets of cards in a hand\r\n  getPairs(fullHand) {\r\n    //debugger\r\n    // reduce the array to an array of chars\r\n    let charArray = this.convertToChars(fullHand)\r\n    // creating aset removes duplicates.\r\n    const uniqueSet = new Set(charArray)\r\n    // turn set back to array so that we have an\r\n    // array of unique values in the hand\r\n    const uniqueValues = [...uniqueSet]\r\n    let finalResult = []\r\n    // looping through 3 values - a, j and 3\r\n    for (let i=0; i<uniqueValues.length; i++) {\r\n      let result = []\r\n      let occurences = this.countOcurrences(charArray, uniqueValues[i])\r\n      if (occurences > 1) {\r\n        // get index of each one\r\n        for (let k=0; k < charArray.length; k++) {\r\n          if (uniqueValues[i]===charArray[k]) {\r\n            result.push(fullHand[k])\r\n          }\r\n        }\r\n        let resultObj = {}\r\n        resultObj.result = result\r\n        let resultLength = result.length\r\n        if (resultLength === 2 ) {\r\n          resultObj.description = 'Pair'\r\n          resultObj.score = 2\r\n        }\r\n        else if (resultLength === 3 ) {\r\n          resultObj.description = 'Three of a kind'\r\n          resultObj.score = 6\r\n        } else if (resultLength === 4 ) {\r\n          resultObj.description = 'Four of a kind'\r\n          resultObj.score = 12\r\n        }\r\n        finalResult.push(resultObj)\r\n      }\r\n    }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\ncheckForFifteenPairs(cardHand, target=15) {\r\n  // debugger\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let result = this.twoSum(hand,target)\r\n  let pairs = []\r\n  for (var i=0; i < result.length; i++) {\r\n    pairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return pairs\r\n}\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\ncheckForFifteenTriplets(cardHand, target=15) {\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0;\r\n  // let intermediateResult = []\r\n  let triplets = []\r\n  for (let j=start+1; j< hand.length; j++) {\r\n    let result = this.twoSum(hand,pairTarget)\r\n    for (var p=0; p <result.length; p++) {\r\n      let temp = [cardHand[j-1]]\r\n      temp.push(cardHand[result[p][0] +j])\r\n      temp.push(cardHand[result[p][1] +j])\r\n      triplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return triplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuartets(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  for (let i=0; i < hand.length; i++) {\r\n    let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]-hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i,1)\r\n      finalResult.push(result)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuintet(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]\r\n  if (sum === target) {\r\n    finalResult.push(cardHand)\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\n checkForFlush(cardHand) {\r\n   const copyOfHand = [...cardHand]\r\n   console.log('ppppppppppppp1 ', copyOfHand.length)\r\n   // check for five card flush (all suits are equal)\r\n   if (copyOfHand.length === 5) {\r\n     console.log(copyOfHand[0].suit)\r\n     console.log(copyOfHand[1].suit)\r\n   }\r\n   const checkAllEqual = arr => arr.every( card => card.suit === arr[0].suit )\r\n\r\n   let allEqual = checkAllEqual(copyOfHand)\r\n   console.log(allEqual)\r\n   if (allEqual) {\r\n     return copyOfHand\r\n   } else { // check for flush in forst four cards\r\n     copyOfHand.pop()\r\n     allEqual = checkAllEqual(copyOfHand)\r\n     if (allEqual) {\r\n       return copyOfHand\r\n     }\r\n   }\r\n   console.log('.... returning empty array')\r\n   return []\r\n }\r\n tallyTheScores(pairResult, fullSumsResult) {\r\n   let score = 0\r\n   for (let i=0; i < pairResult.length; i++) {\r\n     //console.log('77777777 ', pairResult)\r\n     score = score + pairResult[i].score\r\n   }\r\n   for (let i=0; i < fullSumsResult.length; i++) {\r\n     console.log('77777777 ', fullSumsResult[i])\r\n     score = score + 2\r\n   }\r\n\r\n\r\n   console.log('Tally of the scores: ', score)\r\n   return score\r\n }\r\n\r\nrender() {\r\n        let pairResults = []\r\n        const { cards, card } = this.props;\r\n        let displayPairs, displaySums, displayFlush\r\n        let showResults = this.state.showResults\r\n        let fullSumsResult, flushResult\r\n        let fullHand = [...cards]\r\n        fullHand.push(card)\r\n        let totalScore = 0\r\n\r\n        if (fullHand.length === 5 ) {\r\n          let charArray = this.convertToChars(fullHand)\r\n          pairResults = this.getPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** P A I R  T E S T I N G')\r\n          console.log(pairResults)\r\n\r\n          // T H I S   I S  T H E   P R O B L E M\r\n          //let sumResultPairs = []\r\n          let sumResultPairs = this.checkForFifteenPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - P A I R S ')\r\n          console.log(sumResultPairs)\r\n\r\n          let sumResultTriplets = this.checkForFifteenTriplets(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - T R I P L E T S  ')\r\n          console.log(sumResultTriplets)\r\n\r\n          // let sumResultQuartets = []\r\n          let sumResultQuartets = this.checkForFifteenQuartets(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U A R T E T S  ')\r\n          console.log(sumResultQuartets)\r\n\r\n          //let sumResultQuintet = []\r\n          let sumResultQuintet = this.checkForFifteenQuintet(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U I N T E T  ')\r\n          console.log(sumResultQuintet)\r\n\r\n          //let sumResultQuintet = []\r\n          flushResult = this.checkForFlush(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** F L U S H   T E S T I N G   ')\r\n          console.log(flushResult)\r\n\r\n          // add all the results of the sums\r\n          fullSumsResult = [...sumResultPairs,  ...sumResultTriplets, ...sumResultQuartets, ...sumResultQuintet]\r\n          totalScore = this.tallyTheScores(pairResults, fullSumsResult)\r\n\r\n        }\r\n        // // temp // TODO:\r\n        // if (!pairResults) {\r\n        //   pairResults = []\r\n        // }\r\n\r\n        const showResultsCheckbox =  <div className='show-results'>\r\n          <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n          <div>Show results</div>\r\n        </div>\r\n\r\n        if (fullHand.length === 5) {\r\n          displayPairs = <div>{pairResults.map(result =>\r\n          <div  style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                <div className='result-row'>\r\n                 <div className='result-image'>{result.result.map(card =>\r\n                   <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                 )}</div>\r\n                 <div className='result-text'>{result.description} - Points: {result.score}</div>\r\n                 </div>\r\n                 </ul>\r\n          </div>\r\n        )}</div>\r\n\r\n        displaySums = <div>{fullSumsResult.map(result =>\r\n          <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <ul>\r\n                 <div className='result-row'>\r\n                   <div className='result-image'>{result.map(card =>\r\n                     <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                   )}</div>\r\n                   <div className='result-text'>Sum to 15 - Points: 2</div>\r\n                 </div>\r\n              </ul>\r\n            </div>\r\n         )}</div>\r\n\r\n         if (flushResult.length > 0) {\r\n             displayFlush = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{flushResult.map(card =>\r\n                      <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                    )}</div>\r\n                    <div className='result-text'>Flush - Points: 5</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n           } else {\r\n             displayFlush = <div/>\r\n           }\r\n         }\r\n\r\n         if (fullHand.length === 5 ) {\r\n          return <div>\r\n          <div>{showResultsCheckbox}</div>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <h3>Result: Score = {totalScore}</h3>\r\n            </div>\r\n            {displayPairs}\r\n            {displaySums}\r\n            {displayFlush}\r\n          </div>\r\n       } else {\r\n         return (\r\n           <div>\r\n             {showResultsCheckbox}\r\n             <div>Nothing to display</div>\r\n           </div>\r\n\r\n         )\r\n       }\r\n\r\n    }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.turnOverCard = this.turnOverCard.bind(this)\r\n      this.getHand = this.getHand.bind(this)\r\n      this.state = {\r\n        'deck': []\r\n        //'showResults': false\r\n      }\r\n    }\r\n    componentDidMount() {\r\n        // const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\r\n        // console.log(\"Look at me. I mounted!!\")\r\n\r\n\r\n        // temporarily removed this to save bandwidth and resue the same deck\r\n        const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n                // console.log('STATE1111', this.state)\r\n                // console.log('BBBBBBB ', result)\r\n                this.setState({\r\n                    deck: result\r\n                })\r\n            })\r\n    }\r\n\r\n    turnOverCard(DeckId) {\r\n      // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET Crib state', this.state)\r\n            // console.log('GT Crib result ', result)\r\n            //console.log('CCCCCCC ', this)\r\n            // console.log('GET Crib cards', result.cards[0])\r\n            this.setState({\r\n              crib: result.cards\r\n              //crib: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n            })\r\n          });\r\n    }\r\n\r\n    // // fake results of a pair\r\n    getHandTemp(DeckId) {\r\n      const results = [\r\n        {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png', suit: 'hearts'},\r\n        {value: '2', code: '2d', image: 'https://deckofcardsapi.com/static/img/2D.png', suit: 'diamonds'},\r\n        {value: '9', code: '9c', image: 'https://deckofcardsapi.com/static/img/9C.png', suit: 'clubs'},\r\n        {value: '4', code: '4h', image: 'https://deckofcardsapi.com/static/img/4H.png', suit: 'hearts'},\r\n      ]\r\n      this.setState({\r\n         hand: results\r\n      })\r\n    }\r\n\r\n/*\r\n * [cards]\r\n * card.code        eg. JS, AD, 9H\r\n * card.image       eg.\r\n * card.cardsImages\r\n * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n * card.value       eg. JACK, ACE, 9\r\n * card.code        eg. \r\n *\r\n *\r\n *\r\n */\r\n    getHand(DeckId) {\r\n      // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET HAND state', this.state)\r\n            // console.log('GET HAND result ', result)\r\n            // console.log('CCCCCCC ')\r\n            // console.log('GET HAND cards1', result)\r\n            console.log('GET HAND cards2', result.cards)\r\n            this.setState({\r\n               hand: result.cards\r\n            })\r\n          });\r\n    }\r\n\r\n    render() {\r\n        const {deck_id} = this.state.deck;\r\n\r\n        let card\r\n        if (this.state.crib) {\r\n          card = this.state.crib[0]\r\n        } else {\r\n          card = {}\r\n        }\r\n\r\n        let cards\r\n        if (this.state.hand) {\r\n          cards = this.state.hand\r\n        } else {\r\n          cards = []\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Cribbage Hand Tester</h1>\r\n                <p>Guess how many points this hand is worth.</p>\r\n                <Hand deck_id={deck_id} getHand={this.getHand} cards={cards}/>\r\n                <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card}/>\r\n                <Results cards={cards} card={card}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}