{"version":3,"sources":["Deck.js","Hand.js","cribbage.js","Results.js","App.js","index.js"],"names":["Deck","cardImage","_this","this","deck_id","props","code","card","image","react_default","a","createElement","className","src","alt","onClick","turnOverCard","Component","Hand","cardsImages","cards","cardsLeft","console","log","length","map","key","getHand","patternsOfThree","patternsOfFour","convertToIntegers","value","isNaN","parseInt","twoSum","arr","target","result","i","j","push","findRun","hand","toCheck","runLength","runFound","k","val","countOcurrences","c","count","checkForRuns","cardHand","sortedCards","copyOfCards","Object","toConsumableArray","sort","b","sortCards","runsResult","runOf5Found","runOf4Found","description","score","Results","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","charArray","suitsArray","suit","pairResult","fullSumsResult","nibsResult","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","flushResult","_this2","pairResults","_this$props","fullHand","totalScore","convertToChars","uniqueSet","Set","uniqueValues","finalResult","resultObj","resultLength","getPairs","sumResultPairs","arguments","undefined","pairs","checkForFifteenPairs","sumResultTriplets","pairTarget","shift","triplets","start","p","temp","checkForFifteenTriplets","sumResultQuartets","splice","checkForFifteenQuartets","sumResultQuintet","checkForFifteenQuintet","copyOfHand","checkAllEqual","every","allEqual","pop","checkForFlush","communitySuit","checkForNibs","concat","tallyTheScores","showResultsCheckbox","type","inline","checked","setState","style","display","App","bind","assertThisInitialized","deck","fetch","then","response","json","remaining","DeckId","_this3","url","communityCard","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7121c166.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const code = this.props.card.code\r\n        const image = this.props.card.image\r\n\r\n        let cardImage\r\n        if (image) {\r\n          cardImage = <div>\r\n            <img className='hand' src={image} alt={code}/ >\r\n          </div>\r\n        } else {\r\n          cardImage = <div>\r\n            <img className='hand' src='./card_back.jpg' alt={code}/ >\r\n          </div>\r\n        }\r\n\r\n        return (\r\n        <div>\r\n          <button onClick={() => this.props.turnOverCard({deck_id})}>Turn Over</button>\r\n          <div>Community Card</div>\r\n          {cardImage}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const cards = this.props.cards\r\n        const cardsLeft = this.props.cardsLeft\r\n\r\n        console.log('PPPPPPP ', this.props)\r\n        let cardsImages\r\n        if (cards.length > 0) {\r\n          cardsImages = cards.map(card => {\r\n            return <img className='hand' src={card.image} key={card.code} alt={card.code}/>\r\n          })\r\n        } else {\r\n          cardsImages =\r\n          <div>\r\n            <img className='hand' src='./card_back.jpg' alt='1'/ >\r\n            <img className='hand' src='./card_back.jpg' alt='2'/ >\r\n            <img className='hand' src='./card_back.jpg' alt='3'/ >\r\n            <img className='hand' src='./card_back.jpg' alt='4'/ >\r\n          </div>\r\n        }\r\n        return (\r\n          <div>\r\n            <button className='freddy' onClick={() => this.props.getHand({deck_id})}>Get Hand</button>\r\n            <div>Cards remaining in deck: {cardsLeft}</div>\r\n            <div>{cardsImages}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hand\r\n","\r\n// all 10 combinations that a run of three can have\r\nconst patternsOfThree = [\r\n  [0, 1, 2],\r\n  [0, 1, 3],\r\n  [1, 2, 3],\r\n  [0, 1, 4],\r\n  [0, 2, 4],\r\n  [1, 2, 4],\r\n  [0, 3, 4],\r\n  [1, 3, 4],\r\n  [2, 3, 4],\r\n  [0, 2, 3]\r\n]\r\n\r\n// all 4 combinations that a run of 4 can have\r\nconst patternsOfFour = [\r\n  [0,1,2,3],\r\n  [0,1,2,4],\r\n  [0,1,3,4],\r\n  [0,2,3,4],\r\n  [1,2,3,4]\r\n]\r\n\r\nfunction convertToIntegers(cards) {\r\n  var arrNoSuits = cards.map(card => card.value)\r\n  // change face cards and ace to numbers\r\n  var arrInteger = arrNoSuits.map(function (card) {\r\n    if (isNaN(card)) {\r\n      card = (card === 'ACE') ? 1 :10\r\n    } else {\r\n      card = parseInt(card,10)\r\n    }\r\n    return card\r\n  })\r\n  return arrInteger\r\n  }\r\n  // helper function to sort the cards and add 'val' property\r\n  function sortCards(cards) {\r\n    let copyOfCards = [...cards]\r\n    for (let i=0; i < cards.length; i++) {\r\n\r\n      switch(copyOfCards[i].value) {\r\n        case 'ACE':\r\n          copyOfCards[i].val = 1;\r\n          break;\r\n        case 'JACK':\r\n          copyOfCards[i].val = 11;\r\n          break;\r\n        case 'QUEEN':\r\n          copyOfCards[i].val = 12;\r\n          break;\r\n        case 'KING':\r\n          copyOfCards[i].val = 13\r\n          break;\r\n        default:\r\n          copyOfCards[i].val = parseInt(copyOfCards[i].value,10);\r\n        }\r\n      }\r\n    copyOfCards.sort((a,b)=> a.val-b.val)\r\n    return copyOfCards\r\n  }\r\n\r\n  /**\r\n * Returns array of two numbers that sum to the target value\r\n * @param {number[]} arr - Array of integers\r\n * @param {number} target - Target value that the pairs should sum to\r\n * @return {Array<Array<number>>} Array of pairs of numbers where each number represents the poistion in the hand\r\n * @example [[1,2], [3,5], [4,5]]\r\n *\r\n */\r\nfunction twoSum(arr, target) {\r\n  var result = [];\r\n  for (var i = 0; i < arr.length; i++) {\r\n    for (var j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n// strip the cards array down to a simple array of characters\r\nfunction convertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function (card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// strip the cards array down to a simple array of suits\r\nfunction convertToSuits(cards) {\r\n  let suitsArray = []\r\n  cards.map(function (card) {\r\n    return suitsArray.push(card.suit)\r\n  })\r\n  return suitsArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\nfunction findRun(hand, toCheck, runLength) {\r\n  let runFound = true\r\n  for (let k=0; k < runLength-1; k++) {\r\n    let result = hand[toCheck[k+1]].val-hand[toCheck[k]].val\r\n    if (result === 1 ) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n  // quick and dirty way to count occurences of a character in an array\r\n  function countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n  // gets pairs, triplets and quartets of cards in a hand\r\n  export function getPairs(fullHand) {\r\n    //debugger\r\n    // reduce the array to an array of chars\r\n    let charArray = convertToChars(fullHand)\r\n    // creating aset removes duplicates.\r\n    const uniqueSet = new Set(charArray)\r\n    // turn set back to array so that we have an\r\n    // array of unique values in the hand\r\n    const uniqueValues = [...uniqueSet]\r\n    let finalResult = []\r\n    // looping through 3 values - a, j and 3\r\n    for (let i=0; i<uniqueValues.length; i++) {\r\n      let result = []\r\n      let occurences = countOcurrences(charArray, uniqueValues[i])\r\n      if (occurences > 1) {\r\n        // get index of each one\r\n        for (let k=0; k < charArray.length; k++) {\r\n          if (uniqueValues[i]===charArray[k]) {\r\n            result.push(fullHand[k])\r\n          }\r\n        }\r\n        let resultObj = {}\r\n        resultObj.result = result\r\n        let resultLength = result.length\r\n        if (resultLength === 2 ) {\r\n          resultObj.description = 'Pair'\r\n          resultObj.score = 2\r\n        }\r\n        else if (resultLength === 3 ) {\r\n          resultObj.description = 'Three of a kind'\r\n          resultObj.score = 6\r\n        } else if (resultLength === 4 ) {\r\n          resultObj.description = 'Four of a kind'\r\n          resultObj.score = 12\r\n        }\r\n        finalResult.push(resultObj)\r\n      }\r\n    }\r\n  return finalResult\r\n  }\r\n  /**\r\n   * Returns sets of two cards that sum to the target value\r\n   * @param {string[]} cardHand - Array of cards\r\n   * @param {number} target - Target value that the 2 cards should sum to\r\n   * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n   * @example\r\n   * [['9h', '6d'], ['7s', '8h']\r\n   *\r\n   */\r\n  export function checkForFifteenPairs(cardHand, target=15) {\r\n    // debugger\r\n    let hand = convertToIntegers(cardHand)\r\n    let result = twoSum(hand,target)\r\n    let pairs = []\r\n    for (var i=0; i < result.length; i++) {\r\n      pairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n    }\r\n    return pairs\r\n  }\r\n\r\n  /**\r\n   * Returns sets of three cards that sum to the target value\r\n   * @param {string[]} cardHand - Array of cards\r\n   * @param {number} target - Target value that the 3 cards should sum to\r\n   * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n   * @example\r\n   * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n   *\r\n   */\r\n  export function checkForFifteenTriplets(cardHand, target=15) {\r\n    let hand = convertToIntegers(cardHand)\r\n    let pairTarget = target - hand[0]\r\n    hand.shift()\r\n    let start = 0;\r\n    // let intermediateResult = []\r\n    let triplets = []\r\n    for (let j=start+1; j< hand.length+2; j++) {\r\n      let result = twoSum(hand,pairTarget)\r\n      for (var p=0; p <result.length; p++) {\r\n        let temp = [cardHand[j-1]]\r\n        temp.push(cardHand[result[p][0] +j])\r\n        temp.push(cardHand[result[p][1] +j])\r\n        triplets.push(temp)\r\n      }\r\n      pairTarget = target - hand[0]\r\n      hand.shift()\r\n    }\r\n    return triplets\r\n  }\r\n\r\n  /**\r\n   * Returns sets of four cards that sum to the target value\r\n   * @param {string[]} cardHand - Array of cards\r\n   * @param {number} target - Target value that the 4 cards should sum to\r\n   * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n   * @example\r\n   * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n   *\r\n   */\r\n  export function checkForFifteenQuartets(cardHand, target=15) {\r\n    let finalResult = []\r\n    let hand = convertToIntegers(cardHand)\r\n    for (let i=0; i < hand.length; i++) {\r\n      let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]-hand[i]\r\n      if (sum === target) {\r\n        let result = [...cardHand]\r\n        result.splice(i,1)\r\n        finalResult.push(result)\r\n      }\r\n    }\r\n    return finalResult\r\n  }\r\n  /**\r\n   * Returns sets of five cards that sum to the target value\r\n   * @param {string[]} cardHand - Array of cardes\r\n   * @param {number} target - Target value that the 5 cards should sum to\r\n   * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n   * @example\r\n   * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n   *\r\n   */\r\n  export function checkForFifteenQuintet(cardHand, target=15) {\r\n    let finalResult = []\r\n    let hand = convertToIntegers(cardHand)\r\n    let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]\r\n    if (sum === target) {\r\n      finalResult.push(cardHand)\r\n    }\r\n    return finalResult\r\n  }\r\n\r\n  /**\r\n   * Returns sets of four or five cards that are the same suit\r\n   * @param {string[]} cardHand - Array of cardes\r\n   * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n   *\r\n   */\r\n   export function checkForFlush(cardHand) {\r\n     const copyOfHand = [...cardHand]\r\n     // check for five card flush (all suits are equal)\r\n     const checkAllEqual = arr => arr.every( card => card.suit === arr[0].suit )\r\n\r\n     let allEqual = checkAllEqual(copyOfHand)\r\n     if (allEqual) {\r\n       return copyOfHand\r\n     } else { // check for flush in forst four cards\r\n       copyOfHand.pop()\r\n       allEqual = checkAllEqual(copyOfHand)\r\n       if (allEqual) {\r\n         return copyOfHand\r\n       }\r\n     }\r\n     return []\r\n   }\r\n\r\n   export function // checks if the hand as a Jack that matches the suit of the community card\r\n   checkForNibs(cards, card) {\r\n     let communitySuit = card.suit\r\n     let result = []\r\n     for (let i=0; i < cards.length; i++ ) {\r\n       if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n         result.push(card)\r\n       }\r\n     }\r\n     return result\r\n   }\r\n\r\n   export function  /**\r\n     * Returns sets of three, four or five cards that are sequential ie; a run\r\n     * @param {string[]} cardHand - Array of cardes\r\n     * @return {Array<Array<Card>>} Array of Cards representing a run\r\n     *\r\n     */\r\n     checkForRuns(cardHand) {\r\n       let sortedCards = sortCards(cardHand)\r\n       let runsResult = []\r\n\r\n       let runOf5Found = true\r\n\r\n       // start by looking for runs of 5\r\n       for (let i=0; i < 4; i++) {\r\n         if (sortedCards[i+1].val-sortedCards[i].val !== 1 ) {\r\n           runOf5Found = false\r\n           break\r\n         }\r\n       }\r\n\r\n       // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n       let runOf4Found = false\r\n       if (!runOf5Found) {\r\n         for (let i=0; i< patternsOfFour.length; i++) {\r\n           if (findRun(sortedCards, patternsOfFour[i], 4)) {\r\n             runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n             runOf4Found = true\r\n           }\r\n         }\r\n       }\r\n       // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n     let runOf3Found = false\r\n     if (!runOf4Found) {\r\n       for (let i=0; i< patternsOfThree.length; i++) {\r\n         if (findRun(sortedCards, patternsOfThree[i], 3)) {\r\n           runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n           runsResult.description='fred'\r\n           runsResult.score = 3\r\n           runOf3Found = true\r\n         }\r\n       }\r\n     }\r\n       return runsResult\r\n     }\r\n","import React, { Component } from 'react';\r\nimport {getPairs, checkForFifteenPairs, checkForFifteenTriplets, checkForFifteenQuartets, checkForFifteenQuintet, checkForFlush, checkForNibs, checkForRuns} from './cribbage.js'\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showResults: true}\r\n    // this.personName = 'Fred'\r\n    // all 10 combinations that a run of three can have\r\n    this.patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4],\r\n      [0, 2, 3]\r\n    ]\r\n  }\r\n\r\n\r\n// helper function to convert the card.value into an integer\r\n  convertToIntegers(cards) {\r\n    var arrNoSuits = cards.map(card => card.value)\r\n    // change face cards and ace to numbers\r\n    var arrInteger = arrNoSuits.map(function (card) {\r\n      if (isNaN(card)) {\r\n        card = (card === 'ACE') ? 1 :10\r\n      } else {\r\n        card = parseInt(card,10)\r\n      }\r\n      return card\r\n    })\r\n    return arrInteger\r\n  }\r\n\r\n  // helper function to sort the cards and add 'val' property\r\n  sortCards(cards) {\r\n    let copyOfCards = [...cards]\r\n    for (let i=0; i < cards.length; i++) {\r\n\r\n      switch(copyOfCards[i].value) {\r\n        case 'ACE':\r\n          copyOfCards[i].val = 1;\r\n          break;\r\n        case 'JACK':\r\n          copyOfCards[i].val = 11;\r\n          break;\r\n        case 'QUEEN':\r\n          copyOfCards[i].val = 12;\r\n          break;\r\n        case 'KING':\r\n          copyOfCards[i].val = 13\r\n          break;\r\n        default:\r\n          copyOfCards[i].val = parseInt(copyOfCards[i].value,10);\r\n        }\r\n      }\r\n    copyOfCards.sort((a,b)=> a.val-b.val)\r\n    return copyOfCards\r\n  }\r\n\r\n  /**\r\n * Returns array of two numbers that sum to the target value\r\n * @param {number[]} arr - Array of integers\r\n * @param {number} target - Target value that the pairs should sum to\r\n * @return {Array<Array<number>>} Array of pairs of numbers where each number represents the poistion in the hand\r\n * @example [[1,2], [3,5], [4,5]]\r\n *\r\n */\r\ntwoSum(arr, target) {\r\n  var result = [];\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tfor (var j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  return result;\r\n}\r\n\r\n// strip the cards array down to a simple array of characters\r\nconvertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function (card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// strip the cards array down to a simple array of suits\r\nconvertToSuits(cards) {\r\n  let suitsArray = []\r\n  cards.map(function (card) {\r\n    return suitsArray.push(card.suit)\r\n  })\r\n  return suitsArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\nfindRun(hand, toCheck, runLength) {\r\n  let runFound = true\r\n  for (let k=0; k < runLength-1; k++) {\r\n    let result = hand[toCheck[k+1]].val-hand[toCheck[k]].val\r\n    if (result === 1 ) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n  // quick and dirty way to count occurences of a character in an array\r\n  countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n tallyTheScores(pairResult, fullSumsResult, runsResult, nibsResult) {\r\n   let score = 0\r\n   for (let i=0; i < pairResult.length; i++) {\r\n     score = score + pairResult[i].score\r\n   }\r\n   for (let i=0; i < fullSumsResult.length; i++) {\r\n     score = score + 2\r\n   }\r\n   for (let i=0; i < runsResult.length; i++) {\r\n     score = score + runsResult[i].length\r\n   }\r\n   if (nibsResult.length>0) {\r\n     score = score + 1\r\n   }\r\n   return score\r\n }\r\n\r\nrender() {\r\n        let pairResults = []\r\n        const {cards, card}  = this.props\r\n\r\n        let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n        let showResults = this.state.showResults\r\n        let fullSumsResult, flushResult, runsResult, nibsResult\r\n        let fullHand = [...cards]\r\n        fullHand.push(card)\r\n        let totalScore = 0\r\n\r\n        if (fullHand.length === 5 ) {\r\n          pairResults = getPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** P A I R  T E S T I N G')\r\n          console.log(pairResults)\r\n\r\n          // T H I S   I S  T H E   P R O B L E M\r\n          //let sumResultPairs = []\r\n          let sumResultPairs = checkForFifteenPairs(fullHand)\r\n          console.log('****** S U M   T E S T I N G - P A I R S ')\r\n          console.log(sumResultPairs)\r\n\r\n          let sumResultTriplets = checkForFifteenTriplets(fullHand)\r\n          console.log('****** S U M   T E S T I N G - T R I P L E T S  ')\r\n          console.log(sumResultTriplets)\r\n\r\n          // let sumResultQuartets = []\r\n          let sumResultQuartets = checkForFifteenQuartets(fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U A R T E T S  ')\r\n          console.log(sumResultQuartets)\r\n\r\n          //let sumResultQuintet = []\r\n          let sumResultQuintet = checkForFifteenQuintet(fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U I N T E T  ')\r\n          console.log(sumResultQuintet)\r\n\r\n          //let sumResultQuintet = []\r\n          flushResult = checkForFlush(fullHand)\r\n          console.log('****** F L U S H   T E S T I N G   ')\r\n          console.log(flushResult)\r\n\r\n          runsResult = checkForRuns(fullHand)\r\n          console.log('******  R U N S    T E S T I N G   ')\r\n          console.log('======> runsResult ', runsResult)\r\n          console.log(runsResult)\r\n\r\n          nibsResult = checkForNibs(cards, card)\r\n          console.log('======> cards: ', cards)\r\n          console.log('======> card: ', card)\r\n          console.log('======> nibsResult ', nibsResult)\r\n          console.log('******  N I B S   T E S T I N G   ')\r\n          console.log(nibsResult)\r\n\r\n          // add all the results of the sums\r\n          fullSumsResult = [...sumResultPairs,  ...sumResultTriplets, ...sumResultQuartets, ...sumResultQuintet]\r\n          totalScore = this.tallyTheScores(pairResults, fullSumsResult, runsResult, nibsResult)\r\n\r\n        }\r\n\r\n        const showResultsCheckbox =  <div className='show-results'>\r\n          <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n          <div>Show results</div>\r\n        </div>\r\n\r\n        if (fullHand.length === 5) {\r\n          displayPairs = <div>{pairResults.map(result =>\r\n          <div  style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                <div className='result-row'>\r\n                 <div className='result-image'>{result.result.map(card =>\r\n                   <img className='result-card' src={card.image} key={card.code} alt={card.code}/>\r\n                    )}\r\n                  </div>\r\n                 <div className='result-text'>{result.description} - Points: {result.score}</div>\r\n                 </div>\r\n                 </ul>\r\n          </div>\r\n        )}</div>\r\n\r\n        displaySums = <div>{fullSumsResult.map(result =>\r\n          <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <ul>\r\n                 <div className='result-row'>\r\n                   <div className='result-image'>{result.map(card =>\r\n                     <img className='result-card' src={card.image} key={card.code} alt={card.code}/>\r\n                     )}\r\n                    </div>\r\n                   <div className='result-text'>Sum to 15 - Points: 2</div>\r\n                 </div>\r\n              </ul>\r\n            </div>\r\n         )}</div>\r\n\r\n         displayRuns = <div>{runsResult.map(result =>\r\n           <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{result.map(card =>\r\n                      <img className='result-card' src={card.image} key={card.code} alt={card.code}/>\r\n                      )}\r\n                    </div>\r\n                    <div className='result-text'>Run - Points: {result.length}</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n          )}</div>\r\n\r\n          displayNibs = <div>{nibsResult.map(result =>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                   <div className='result-row'>\r\n                     <div className='result-image'>\r\n                       <img className='result-card' src={result.image} key={result.code} alt={result.code}/>\r\n                     </div>\r\n                     <div className='result-text'>Nibs - Points: 1</div>\r\n                   </div>\r\n                </ul>\r\n              </div>\r\n           )}</div>\r\n         if (flushResult.length > 0) {\r\n             displayFlush = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{flushResult.map(card =>\r\n                      <img className='result-card' src={card.image} key={card.code} alt={card.code}/>\r\n                      )}\r\n                    </div>\r\n                    <div className='result-text'>Flush - Points: 5</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n           } else {\r\n             displayFlush = <div/>\r\n           }\r\n         }\r\n\r\n\r\n         if (fullHand.length === 5 ) {\r\n          return <div>\r\n          <div>{showResultsCheckbox}</div>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <h3>Result: Score = {totalScore}</h3>\r\n            </div>\r\n            {displayPairs}\r\n            {displaySums}\r\n            {displayRuns}\r\n            {displayFlush}\r\n            {displayNibs}\r\n          </div>\r\n       } else {\r\n         return (\r\n           <div>\r\n             {showResultsCheckbox}\r\n             <div>Nothing to display</div>\r\n           </div>\r\n\r\n         )\r\n       }\r\n\r\n    }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n// import {getScore} from './cribbage.js'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.turnOverCard = this.turnOverCard.bind(this)\r\n      this.getHand = this.getHand.bind(this)\r\n      this.state = {\r\n        'deck': [],\r\n        'cardsLeft': 52\r\n        //'showResults': false\r\n      }\r\n    }\r\n    componentDidMount() {\r\n\r\n      // let test = getScore()\r\n      // console.log('-------------------> test ', test)\r\n        // temporarily removed this to save bandwidth and resue the same deck\r\n        const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n                console.log('STATE1111', this.state)\r\n                console.log('BBBBBBB ', result)\r\n                this.setState({\r\n                    deck: result,\r\n                    cardsLeft: result.remaining\r\n                })\r\n            })\r\n    }\r\n\r\n    turnOverCard(DeckId) {\r\n      // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET Crib state', this.state)\r\n            // console.log('GT Crib result ', result)\r\n            //console.log('CCCCCCC ', this)\r\n            // console.log('GET Crib cards', result.cards[0])\r\n            this.setState({\r\n              communityCard: result.cards[0],\r\n              cardsLeft: result.remaining\r\n              //communityCard: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n            })\r\n          });\r\n    }\r\n\r\n    // // fake results of a pair\r\n    getHandTemp(DeckId) {\r\n      const results = [\r\n        {value: '4', code: '4d', image: 'https://deckofcardsapi.com/static/img/4D.png', suit: 'DIAMONDS'},\r\n        {value: '2', code: '2c', image: 'https://deckofcardsapi.com/static/img/2C.png', suit: 'CLUBS'},\r\n        {value: '2', code: '2h', image: 'https://deckofcardsapi.com/static/img/2H.png', suit: 'HEARTS'},\r\n        {value: '3', code: '3h', image: 'https://deckofcardsapi.com/static/img/3H.png', suit: 'HEARTS'},\r\n      ]\r\n      this.setState({\r\n         hand: results\r\n      })\r\n    }\r\n\r\n/*\r\n * [cards]\r\n * card.code        eg. JS, AD, 9H\r\n * card.image       eg.\r\n * card.cardsImages\r\n * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n * card.value       eg. JACK, ACE, 9\r\n * card.code        eg.\r\n *\r\n *\r\n *\r\n */\r\n    getHand(DeckId) {\r\n      // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            this.setState({\r\n               hand: result.cards,\r\n               cardsLeft: result.remaining\r\n            })\r\n          });\r\n    }\r\n\r\n    render() {\r\n        const {deck_id} = this.state.deck;\r\n        const cardsLeft = this.state.cardsLeft\r\n        let card\r\n        if (this.state.communityCard) {\r\n          card = this.state.communityCard\r\n        } else {\r\n          card = {}\r\n        }\r\n\r\n        let cards\r\n        if (this.state.hand) {\r\n          cards = this.state.hand\r\n        } else {\r\n          cards = []\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Cribbage Hand Tester</h1>\r\n                <p>Guess how many points this hand is worth.</p>\r\n                <div className='result-row'>\r\n                  <div className='full-hand-cards'>\r\n                    <Hand deck_id={deck_id} getHand={this.getHand} cardsLeft={cardsLeft} cards={cards}/>\r\n                  </div>\r\n                  <div className='full-hand-community-card'>\r\n                    <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card}/>\r\n                  </div>\r\n                </div>\r\n                <Results cards={cards} card={card}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}