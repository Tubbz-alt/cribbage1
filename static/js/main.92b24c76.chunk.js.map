{"version":3,"sources":["Deck.js","Hand.js","Results.js","App.js","index.js"],"names":["Deck","cardImage","_this","this","deck_id","props","code","card","image","react_default","a","createElement","className","src","alt","onClick","turnOverCard","Component","Hand","cardsImages","cards","length","map","key","getHand","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","personName","patternsOfThree","value","isNaN","parseInt","copyOfCards","toConsumableArray","i","val","sort","b","arr","target","result","j","push","charArray","suitsArray","suit","hand","toCheck","runLength","runFound","k","c","count","fullHand","convertToChars","uniqueSet","Set","uniqueValues","finalResult","countOcurrences","resultObj","resultLength","description","score","cardHand","arguments","undefined","convertToIntegers","twoSum","pairs","pairTarget","shift","triplets","start","p","temp","splice","copyOfHand","checkAllEqual","every","allEqual","pop","communitySuit","sortedCards","sortCards","runsResult","patternsOfFour","console","log","runOf5Found","runOf4Found","findRun","pairResult","fullSumsResult","nibsResult","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","flushResult","_this2","pairResults","_this$props","totalScore","getPairs","sumResultPairs","checkForFifteenPairs","sumResultTriplets","checkForFifteenTriplets","sumResultQuartets","checkForFifteenQuartets","sumResultQuintet","checkForFifteenQuintet","checkForFlush","checkForRuns","checkForNibs","concat","tallyTheScores","showResultsCheckbox","type","inline","checked","setState","style","display","App","bind","assertThisInitialized","deck","fetch","then","response","json","DeckId","_this3","url","crib","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.92b24c76.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const code = this.props.card.code\r\n        const image = this.props.card.image\r\n\r\n        let cardImage\r\n        if (image) {\r\n          cardImage = <div>\r\n            <img className='hand' src={image} alt={code}/ >\r\n          </div>\r\n        } else {\r\n          cardImage = <div>\r\n            <img className='hand' src='./card_back.jpg' alt={code}/ >\r\n          </div>\r\n        }\r\n\r\n        return (\r\n        <div>\r\n          <button onClick={() => this.props.turnOverCard({deck_id})}>Community card</button>\r\n          {cardImage}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n        const { deck_id } = this.props;\r\n        const cards = this.props.cards\r\n        let cardsImages\r\n        if (cards.length > 0) {\r\n          cardsImages = cards.map(card => {\r\n            return <img className='hand' src={card.image} key={card.code} alt={card.code}/>\r\n          })\r\n        } else {\r\n          cardsImages = <div><img className='hand' src='card_back.jpg' alt='1'/ >\r\n          <img className='hand' src='./card_back.jpg' alt='2'/ >\r\n          <img className='hand' src='./card_back.jpg' alt='3'/ >\r\n          <img className='hand' src='../card_back.jpg' alt='4'/ ></div>\r\n        }\r\n        return (\r\n          <div>\r\n            <button className='freddy' onClick={() => this.props.getHand({deck_id})}>Get Hand</button>\r\n            <div>{cardsImages}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hand\r\n","import React, { Component } from 'react';\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showResults: true}\r\n    this.personName = 'Fred'\r\n    // all 10 combinations that a run of three can have\r\n    this.patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4],\r\n      [0, 2, 3]\r\n    ]\r\n  }\r\n\r\n\r\n// helper function to convert the card.value into an integer\r\n  convertToIntegers(cards) {\r\n    var arrNoSuits = cards.map(card => card.value)\r\n    // change face cards and ace to numbers\r\n    var arrInteger = arrNoSuits.map(function (card) {\r\n      if (isNaN(card)) {\r\n        card = (card === 'ACE') ? 1 :10\r\n      } else {\r\n        card = parseInt(card,10)\r\n      }\r\n      return card\r\n    })\r\n    return arrInteger\r\n  }\r\n\r\n  // helper function to sort the cards and add 'val' property\r\n  sortCards(cards) {\r\n    let copyOfCards = [...cards]\r\n    for (let i=0; i < cards.length; i++) {\r\n\r\n      switch(copyOfCards[i].value) {\r\n        case 'ACE':\r\n          copyOfCards[i].val = 1;\r\n          break;\r\n        case 'JACK':\r\n          copyOfCards[i].val = 11;\r\n          break;\r\n        case 'QUEEN':\r\n          copyOfCards[i].val = 12;\r\n          break;\r\n        case 'KING':\r\n          copyOfCards[i].val = 13\r\n          break;\r\n        default:\r\n          copyOfCards[i].val = parseInt(copyOfCards[i].value,10);\r\n        }\r\n      }\r\n    copyOfCards.sort((a,b)=> a.val-b.val)\r\n    return copyOfCards\r\n  }\r\n\r\n  /**\r\n * Returns array of two numbers that sum to the target value\r\n * @param {number[]} arr - Array of integers\r\n * @param {number} target - Target value that the pairs should sum to\r\n * @return {Array<Array<number>>} Array of pairs of numbers where each number represents the poistion in the hand\r\n * @example [[1,2], [3,5], [4,5]]\r\n *\r\n */\r\ntwoSum(arr, target) {\r\n  var result = [];\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tfor (var j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  return result;\r\n}\r\n\r\n// strip the cards array down to a simple array of characters\r\nconvertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function (card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// strip the cards array down to a simple array of suits\r\nconvertToSuits(cards) {\r\n  let suitsArray = []\r\n  cards.map(function (card) {\r\n    return suitsArray.push(card.suit)\r\n  })\r\n  return suitsArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\nfindRun(hand, toCheck, runLength) {\r\n  let runFound = true\r\n  for (let k=0; k < runLength-1; k++) {\r\n    let result = hand[toCheck[k+1]].val-hand[toCheck[k]].val\r\n    if (result === 1 ) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n  // quick and dirty way to count occurences of a character in an array\r\n  countOcurrences(arr, c) {\r\n    let count = 0\r\n    for (let i=0; i<arr.length; i++) {\r\n      if (arr[i] === c) {\r\n        count++\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  // gets pairs, triplets and quartets of cards in a hand\r\n  getPairs(fullHand) {\r\n    //debugger\r\n    // reduce the array to an array of chars\r\n    let charArray = this.convertToChars(fullHand)\r\n    // creating aset removes duplicates.\r\n    const uniqueSet = new Set(charArray)\r\n    // turn set back to array so that we have an\r\n    // array of unique values in the hand\r\n    const uniqueValues = [...uniqueSet]\r\n    let finalResult = []\r\n    // looping through 3 values - a, j and 3\r\n    for (let i=0; i<uniqueValues.length; i++) {\r\n      let result = []\r\n      let occurences = this.countOcurrences(charArray, uniqueValues[i])\r\n      if (occurences > 1) {\r\n        // get index of each one\r\n        for (let k=0; k < charArray.length; k++) {\r\n          if (uniqueValues[i]===charArray[k]) {\r\n            result.push(fullHand[k])\r\n          }\r\n        }\r\n        let resultObj = {}\r\n        resultObj.result = result\r\n        let resultLength = result.length\r\n        if (resultLength === 2 ) {\r\n          resultObj.description = 'Pair'\r\n          resultObj.score = 2\r\n        }\r\n        else if (resultLength === 3 ) {\r\n          resultObj.description = 'Three of a kind'\r\n          resultObj.score = 6\r\n        } else if (resultLength === 4 ) {\r\n          resultObj.description = 'Four of a kind'\r\n          resultObj.score = 12\r\n        }\r\n        finalResult.push(resultObj)\r\n      }\r\n    }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\ncheckForFifteenPairs(cardHand, target=15) {\r\n  // debugger\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let result = this.twoSum(hand,target)\r\n  let pairs = []\r\n  for (var i=0; i < result.length; i++) {\r\n    pairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return pairs\r\n}\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\ncheckForFifteenTriplets(cardHand, target=15) {\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0;\r\n  // let intermediateResult = []\r\n  let triplets = []\r\n  for (let j=start+1; j< hand.length+2; j++) {\r\n    let result = this.twoSum(hand,pairTarget)\r\n    for (var p=0; p <result.length; p++) {\r\n      let temp = [cardHand[j-1]]\r\n      temp.push(cardHand[result[p][0] +j])\r\n      temp.push(cardHand[result[p][1] +j])\r\n      triplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return triplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuartets(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  for (let i=0; i < hand.length; i++) {\r\n    let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]-hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i,1)\r\n      finalResult.push(result)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\ncheckForFifteenQuintet(cardHand, target=15) {\r\n  let finalResult = []\r\n  let hand = this.convertToIntegers(cardHand)\r\n  let sum=hand[0]+hand[1]+hand[2]+hand[3]+hand[4]\r\n  if (sum === target) {\r\n    finalResult.push(cardHand)\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\n checkForFlush(cardHand) {\r\n   const copyOfHand = [...cardHand]\r\n   // check for five card flush (all suits are equal)\r\n   const checkAllEqual = arr => arr.every( card => card.suit === arr[0].suit )\r\n\r\n   let allEqual = checkAllEqual(copyOfHand)\r\n   if (allEqual) {\r\n     return copyOfHand\r\n   } else { // check for flush in forst four cards\r\n     copyOfHand.pop()\r\n     allEqual = checkAllEqual(copyOfHand)\r\n     if (allEqual) {\r\n       return copyOfHand\r\n     }\r\n   }\r\n   return []\r\n }\r\n\r\n // checks if the hand as a Jack that matches the suit of the community card\r\n checkForNibs(cards, card) {\r\n   let communitySuit = card.suit\r\n   let result = []\r\n   for (let i=0; i < cards.length; i++ ) {\r\n     if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n       result.push(card)\r\n     }\r\n   }\r\n   return result\r\n }\r\n\r\n /**\r\n  * Returns sets of three, four or five cards that are sequential ie; a run\r\n  * @param {string[]} cardHand - Array of cardes\r\n  * @return {Array<Array<Card>>} Array of Cards representing a run\r\n  *\r\n  */\r\n  checkForRuns(cardHand) {\r\n    let sortedCards = this.sortCards(cardHand)\r\n    let runsResult = []\r\n    // all 4 combinations that a run of 4 can have\r\n    const patternsOfFour = [\r\n      [0,1,2,3],\r\n      [0,1,2,4],\r\n      [0,1,3,4],\r\n      [0,2,3,4],\r\n      [1,2,3,4]\r\n    ]\r\n    // // all 10 combinations that a run of three can have\r\n    // const patternsOfThree = [\r\n    //   [0, 1, 2],\r\n    //   [0, 1, 3],\r\n    //   [1, 2, 3],\r\n    //   [0, 1, 4],\r\n    //   [0, 2, 4],\r\n    //   [1, 2, 4],\r\n    //   [0, 3, 4],\r\n    //   [1, 3, 4],\r\n    //   [2, 3, 4],\r\n    //   [0, 2, 3]\r\n    // ]\r\n\r\n    console.log(this.personName)\r\n\r\n    let runOf5Found = true\r\n\r\n    // start by looking for runs of 5\r\n    for (let i=0; i < 4; i++) {\r\n      if (sortedCards[i+1].val-sortedCards[i].val !== 1 ) {\r\n        runOf5Found = false\r\n        break\r\n      }\r\n    }\r\n\r\n    // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n    let runOf4Found = false\r\n    if (!runOf5Found) {\r\n      for (let i=0; i< patternsOfFour.length; i++) {\r\n        if (this.findRun(sortedCards, patternsOfFour[i], 4)) {\r\n          let test = '33'\r\n          runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n          runOf4Found = true\r\n        }\r\n      }\r\n    }\r\n    // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  let runOf3Found = false\r\n  if (!runOf4Found) {\r\n    for (let i=0; i< this.patternsOfThree.length; i++) {\r\n      if (this.findRun(sortedCards, this.patternsOfThree[i], 3)) {\r\n        runsResult.push([sortedCards[this.patternsOfThree[i][0]], sortedCards[this.patternsOfThree[i][1]], sortedCards[this.patternsOfThree[i][2]]])\r\n        runsResult.description='fred'\r\n        runsResult.score = 3\r\n        runOf3Found = true\r\n      }\r\n    }\r\n  }\r\n    return runsResult\r\n  }\r\n\r\n\r\n tallyTheScores(pairResult, fullSumsResult, runsResult, nibsResult) {\r\n   let score = 0\r\n   for (let i=0; i < pairResult.length; i++) {\r\n     score = score + pairResult[i].score\r\n   }\r\n   for (let i=0; i < fullSumsResult.length; i++) {\r\n     score = score + 2\r\n   }\r\n   for (let i=0; i < runsResult.length; i++) {\r\n     score = score + runsResult[i].length\r\n   }\r\n   if (nibsResult.length>0) {\r\n     score = score + 1\r\n   }\r\n   return score\r\n }\r\n\r\nrender() {\r\n        let pairResults = []\r\n        const {cards, card}  = this.props\r\n\r\n        let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n        let showResults = this.state.showResults\r\n        let fullSumsResult, flushResult, runsResult, nibsResult\r\n        let fullHand = [...cards]\r\n        fullHand.push(card)\r\n        let totalScore = 0\r\n\r\n        if (fullHand.length === 5 ) {\r\n          pairResults = this.getPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** P A I R  T E S T I N G')\r\n          console.log(pairResults)\r\n\r\n          // T H I S   I S  T H E   P R O B L E M\r\n          //let sumResultPairs = []\r\n          let sumResultPairs = this.checkForFifteenPairs(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - P A I R S ')\r\n          console.log(sumResultPairs)\r\n\r\n          let sumResultTriplets = this.checkForFifteenTriplets(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - T R I P L E T S  ')\r\n          console.log(sumResultTriplets)\r\n\r\n          // let sumResultQuartets = []\r\n          let sumResultQuartets = this.checkForFifteenQuartets(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U A R T E T S  ')\r\n          console.log(sumResultQuartets)\r\n\r\n          //let sumResultQuintet = []\r\n          let sumResultQuintet = this.checkForFifteenQuintet(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** S U M   T E S T I N G - Q U I N T E T  ')\r\n          console.log(sumResultQuintet)\r\n\r\n          //let sumResultQuintet = []\r\n          flushResult = this.checkForFlush(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('****** F L U S H   T E S T I N G   ')\r\n          console.log(flushResult)\r\n\r\n          runsResult = this.checkForRuns(fullHand)\r\n          console.log('======> fullHand: ', fullHand)\r\n          console.log('******  R U N S    T E S T I N G   ')\r\n          console.log('======> runsResult ', runsResult)\r\n          console.log(runsResult)\r\n\r\n          nibsResult = this.checkForNibs(cards, card)\r\n          console.log('======> cards: ', cards)\r\n          console.log('======> card: ', card)\r\n          console.log('======> nibsResult ', nibsResult)\r\n          console.log('******  N I B S   T E S T I N G   ')\r\n          console.log(nibsResult)\r\n\r\n\r\n\r\n          // add all the results of the sums\r\n          fullSumsResult = [...sumResultPairs,  ...sumResultTriplets, ...sumResultQuartets, ...sumResultQuintet]\r\n          totalScore = this.tallyTheScores(pairResults, fullSumsResult, runsResult, nibsResult)\r\n\r\n        }\r\n        // // temp // TODO:\r\n        // if (!pairResults) {\r\n        //   pairResults = []\r\n        // }\r\n\r\n        const showResultsCheckbox =  <div className='show-results'>\r\n          <input type='checkbox' inline='true' checked={showResults} onClick={() => {this.setState({showResults: !showResults})}}/>\r\n          <div>Show results</div>\r\n        </div>\r\n\r\n        if (fullHand.length === 5) {\r\n          displayPairs = <div>{pairResults.map(result =>\r\n          <div  style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                <div className='result-row'>\r\n                 <div className='result-image'>{result.result.map(card =>\r\n                   <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                 )}</div>\r\n                 <div className='result-text'>{result.description} - Points: {result.score}</div>\r\n                 </div>\r\n                 </ul>\r\n          </div>\r\n        )}</div>\r\n\r\n        displaySums = <div>{fullSumsResult.map(result =>\r\n          <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <ul>\r\n                 <div className='result-row'>\r\n                   <div className='result-image'>{result.map(card =>\r\n                     <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                   )}</div>\r\n                   <div className='result-text'>Sum to 15 - Points: 2</div>\r\n                 </div>\r\n              </ul>\r\n            </div>\r\n         )}</div>\r\n\r\n         displayRuns = <div>{runsResult.map(result =>\r\n           <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{result.map(card =>\r\n                      <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                    )}</div>\r\n                    <div className='result-text'>Run - Points: {result.length}</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n          )}</div>\r\n\r\n          displayNibs = <div>{nibsResult.map(result =>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n                <ul>\r\n                   <div className='result-row'>\r\n                     <div className='result-image'>\r\n                       <img className='hand-results' src={result.image} key={result.code} alt={result.code}/>\r\n                     </div>\r\n                     <div className='result-text'>Nibs - Points: 1</div>\r\n                   </div>\r\n                </ul>\r\n              </div>\r\n           )}</div>\r\n         if (flushResult.length > 0) {\r\n             displayFlush = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n               <ul>\r\n                  <div className='result-row'>\r\n                    <div className='result-image'>{flushResult.map(card =>\r\n                      <img className='hand-results' src={card.image} key={card.code} alt={card.code}/>\r\n                    )}</div>\r\n                    <div className='result-text'>Flush - Points: 5</div>\r\n                  </div>\r\n               </ul>\r\n             </div>\r\n           } else {\r\n             displayFlush = <div/>\r\n           }\r\n         }\r\n\r\n\r\n         if (fullHand.length === 5 ) {\r\n          return <div>\r\n          <div>{showResultsCheckbox}</div>\r\n            <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n              <h3>Result: Score = {totalScore}</h3>\r\n            </div>\r\n            {displayPairs}\r\n            {displaySums}\r\n            {displayRuns}\r\n            {displayFlush}\r\n            {displayNibs}\r\n          </div>\r\n       } else {\r\n         return (\r\n           <div>\r\n             {showResultsCheckbox}\r\n             <div>Nothing to display</div>\r\n           </div>\r\n\r\n         )\r\n       }\r\n\r\n    }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.turnOverCard = this.turnOverCard.bind(this)\r\n      this.getHand = this.getHand.bind(this)\r\n      this.state = {\r\n        'deck': []\r\n        //'showResults': false\r\n      }\r\n    }\r\n    componentDidMount() {\r\n        // const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*&limit=1\";\r\n        // console.log(\"Look at me. I mounted!!\")\r\n\r\n\r\n        // temporarily removed this to save bandwidth and resue the same deck\r\n        const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n                // console.log('STATE1111', this.state)\r\n                // console.log('BBBBBBB ', result)\r\n                this.setState({\r\n                    deck: result\r\n                })\r\n            })\r\n    }\r\n\r\n    turnOverCard(DeckId) {\r\n      // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET Crib state', this.state)\r\n            // console.log('GT Crib result ', result)\r\n            //console.log('CCCCCCC ', this)\r\n            // console.log('GET Crib cards', result.cards[0])\r\n            this.setState({\r\n              crib: result.cards\r\n              //crib: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n            })\r\n          });\r\n    }\r\n\r\n    // // fake results of a pair\r\n    getHandTemp(DeckId) {\r\n      const results = [\r\n        {value: '4', code: '4d', image: 'https://deckofcardsapi.com/static/img/4D.png', suit: 'DIAMONDS'},\r\n        {value: '2', code: '2c', image: 'https://deckofcardsapi.com/static/img/2C.png', suit: 'CLUBS'},\r\n        {value: '2', code: '2h', image: 'https://deckofcardsapi.com/static/img/2H.png', suit: 'HEARTS'},\r\n        {value: '3', code: '3h', image: 'https://deckofcardsapi.com/static/img/3H.png', suit: 'HEARTS'},\r\n      ]\r\n      this.setState({\r\n         hand: results\r\n      })\r\n    }\r\n\r\n/*\r\n * [cards]\r\n * card.code        eg. JS, AD, 9H\r\n * card.image       eg.\r\n * card.cardsImages\r\n * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n * card.value       eg. JACK, ACE, 9\r\n * card.code        eg.\r\n *\r\n *\r\n *\r\n */\r\n    getHand(DeckId) {\r\n      // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n      const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n      fetch(url)\r\n          .then(response =>\r\n              response.json()\r\n          )\r\n          .then(result => {\r\n            // console.log('GET HAND state', this.state)\r\n            // console.log('GET HAND result ', result)\r\n            // console.log('CCCCCCC ')\r\n            // console.log('GET HAND cards1', result)\r\n            // console.log('GET HAND cards2', result.cards)\r\n            this.setState({\r\n               hand: result.cards\r\n            })\r\n          });\r\n    }\r\n\r\n    render() {\r\n        const {deck_id} = this.state.deck;\r\n\r\n        let card\r\n        if (this.state.crib) {\r\n          card = this.state.crib[0]\r\n        } else {\r\n          card = {}\r\n        }\r\n\r\n        let cards\r\n        if (this.state.hand) {\r\n          cards = this.state.hand\r\n        } else {\r\n          cards = []\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Cribbage Hand Tester</h1>\r\n                <p>Guess how many points this hand is worth.</p>\r\n                <Hand deck_id={deck_id} getHand={this.getHand} cards={cards}/>\r\n                <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card}/>\r\n                <Results cards={cards} card={card}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}