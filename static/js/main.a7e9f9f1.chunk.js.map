{"version":3,"sources":["components/Hand.js","cribbage.js","components/Results.js","forms/CustomHand.js","App.js","index.js"],"names":["Hand","props","cards","buttonText","cardsLeft","cardsImages","length","map","card","index","react_default","a","createElement","className","src","image","key","code","id","alt","onClick","getHand","sortHand","patternsOfThree","patternsOfFour","convertToIntegers","value","isNaN","parseInt","twoSum","arr","target","arguments","undefined","result","i","j","push","findRun","hand","pattern","runFound","k","val","countOcurrences","c","count","getFifteenSums","sumPairs","cardHand","fifteenPairs","getFifteenPairs","sumTriplets","pairTarget","shift","fifteenTriplets","start","p","temp","getFifteenTriplets","sumQuartets","fifteenQuartets","sum","Object","toConsumableArray","splice","getFifteenQuartets","sumQuintet","fifteenQuartet","getFifteenQuintet","concat","getRuns","sortedCards","copyOfCards","sort","b","sortCards","runsResult","runOf5Found","runOf4Found","uuid","require","Results","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showResults","cardsToHighlight","elem","document","getElementById","style","border","cardsToRemoveHighlight","pairResult","sumsResult","flushResult","nibsResult","score","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","_this2","pairResults","fullHand","totalScore","charArray","convertToChars","uniqueSet","Set","uniqueValues","finalResult","resultObj","resultLength","description","getPairs","copyOfHand","checkAllEqual","every","suit","allEqual","pop","getFlushes","communitySuit","getNibs","tallyTheScores","showResultsCheckbox","type","inline","checked","onChange","setState","onMouseOver","addHighlight","onMouseOut","removeHighlight","Fragment","display","Component","CustomHand","handleChange","event","preventDefault","onCustomHandChange","name","showCardOptions","showSuitOptions","showCustomHandCheckbox","showCustomHand","setShowCustomHand","onSubmit","App","codeMap","ACE","2","3","4","5","6","7","8","9","10","JACK","QUEEN","KING","bind","assertThisInitialized","deck","customHand","fetch","then","response","json","deck_id","remaining","url","_this3","swal","cardA","cardB","comparison","sortedHand","compareCardValues","charAt","position","getCode","newCode","newImage","newCard","toChange","slice","alreadyExists","changeCard","changeSuit","components_Hand","forms_CustomHand","components_Results","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.a7e9f9f1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Component Hand\r\nconst Hand = (props) => {\r\n  const cards = props.cards\r\n  const buttonText = props.buttonText\r\n  const cardsLeft = props.cardsLeft\r\n\r\n  let cardsImages = []\r\n\r\n  if (cards.length > 0) {\r\n    cardsImages = cards.map((card, index) => {\r\n      if (index !== 4) {\r\n        return <img className='card' src={card.image} key={card.code} id={card.code} alt={card.code} />\r\n      } else {\r\n        return <img className='c-card' src={card.image} key={card.code} id={card.code} alt={card.code} />\r\n      }\r\n    })\r\n  } else {\r\n    cardsImages =\r\n      <div className='cribbage-section'>\r\n        <img className='card' src='./card_back.jpg' alt='1' />\r\n        <img className='card' src='./card_back.jpg' alt='2' />\r\n        <img className='card' src='./card_back.jpg' alt='3' />\r\n        <img className='card' src='./card_back.jpg' alt='4' />\r\n        <img className='c-card' src='./card_back.jpg' alt='5' />\r\n      </div>\r\n\r\n  }\r\n  return (\r\n    <div className='cribbage-parent'>\r\n      <header className='cribbage-header'>\r\n        <button className='cribbage-button' onClick={() => props.getHand()}>{buttonText}</button>\r\n        <button className='cribbage-button' onClick={() => props.sortHand()}>Sort cards</button>\r\n      </header>\r\n      <div><p className='cribbage-text'>Cards remaining in deck: {cardsLeft}</p></div>\r\n      <section>\r\n        <div>{cardsImages}</div>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nHand.propTypes = {\r\n  getHand: PropTypes.func.isRequired,\r\n  sortHand: PropTypes.func.isRequired,\r\n  buttonText: PropTypes.string.isRequired,\r\n  cardsLeft: PropTypes.number.isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n}\r\n\r\nexport default Hand\r\n","\r\n// all 10 combinations that a run of three can have\r\nconst patternsOfThree = [\r\n  [0, 1, 2],  // First, second and third card\r\n  [0, 1, 3],  // First, second and fourth card\r\n  [1, 2, 3],  // Second, third and fourth card...\r\n  [0, 1, 4],\r\n  [0, 2, 4],\r\n  [1, 2, 4],\r\n  [0, 3, 4],\r\n  [1, 3, 4],\r\n  [2, 3, 4],\r\n  [0, 2, 3]\r\n]\r\n\r\n// all 4 combinations that a run of 4 can have\r\nconst patternsOfFour = [\r\n  [0, 1, 2, 3],\r\n  [0, 1, 2, 4],\r\n  [0, 1, 3, 4],\r\n  [0, 2, 3, 4],\r\n  [1, 2, 3, 4]\r\n]\r\n\r\n/**\r\n  * Converts each card to a simple integer\r\n  * ACE = 1, Facecards = 10\r\n  * @function convertToIntegers\r\n  * @param {Object[]} - Cards in the players hand\r\n  * @returns {number[]} - Array of numbers representing the cards\r\n  */\r\nfunction convertToIntegers(cards) {\r\n  var arrNoSuits = cards.map(card => card.value)\r\n  // change face cards and ace to numbers\r\n  var arrInteger = arrNoSuits.map(function(card) {\r\n    if (isNaN(card)) {\r\n      card = (card === 'ACE') ? 1 : 10\r\n    } else {\r\n      card = parseInt(card, 10)\r\n    }\r\n    return card\r\n  })\r\n  return arrInteger\r\n}\r\n\r\n/**\r\n  * Sorts the cards and adds 'val' property to represent the points value for each card.\r\n  * example: KING = 14, ACE = 1\r\n  * @function sortCards\r\n  *  @param {Object[]} - Cards in the players hand\r\n  *  @returns {Object[]} - Array of cards that are sorted and have numerica value added\r\n  */\r\nfunction sortCards(cards) {\r\n  let copyOfCards = [...cards]\r\n  for (let i = 0; i < cards.length; i++) {\r\n\r\n    switch (copyOfCards[i].value) {\r\n      case 'ACE':\r\n        copyOfCards[i].val = 1\r\n        break;\r\n      case 'JACK':\r\n        copyOfCards[i].val = 11\r\n        break;\r\n      case 'QUEEN':\r\n        copyOfCards[i].val = 12\r\n        break;\r\n      case 'KING':\r\n        copyOfCards[i].val = 13\r\n        break;\r\n      default:\r\n        copyOfCards[i].val = parseInt(copyOfCards[i].value, 10);\r\n    }\r\n  }\r\n  copyOfCards.sort((a, b) => a.val - b.val)\r\n  return copyOfCards\r\n}\r\n\r\nexport function sumTwoNumbers(a, b) {\r\n  let sum = a + b\r\n  return sum\r\n}\r\n\r\n/**\r\n* Returns array of two number pairs of numbers that sum to the target value\r\n* @function twoSum\r\n* @param {number[]} - Array of integers\r\n* @param {number} - Target value that the pairs should sum to\r\n* @return {number[number[]]} Array of pairs of numbers where each number represents the poistion in the hand\r\n* @example [[1,2], [3,5], [4,5]]\r\n*/\r\nfunction twoSum(arr, target = 15) {\r\n  var result = []\r\n  for (var i = 0; i < arr.length; i++) {\r\n    for (var j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j])\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n* Strips the card array down to a simple array of characters\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @return {number[]} - Character value of each card\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction convertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function(card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\n/**\r\n* Checks for a run in a given array of sorted cards\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @param {number[]} - Pattern of cards to check\r\n* @return {bolean} - Run was found. True/False\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction findRun(hand, pattern) {\r\n  let runFound = true\r\n  for (let k = 0; k < pattern.length - 1; k++) {\r\n    let result = hand[pattern[k + 1]].val - hand[pattern[k]].val\r\n    if (result === 1) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n// quick and dirty way to count occurences of a character in an array\r\nfunction countOcurrences(arr, c) {\r\n  let count = 0\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] === c) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n// gets pairs, triplets and quartets of cards in a hand\r\nexport function getPairs(fullHand) {\r\n  // reduce the array to an array of chars\r\n  let charArray = convertToChars(fullHand)\r\n  // creating a set removes duplicates.\r\n  const uniqueSet = new Set(charArray)\r\n  // turn set back to array so that we have an\r\n  // array of unique values in the hand\r\n  const uniqueValues = [...uniqueSet]\r\n  let finalResult = []\r\n  // looping through 3 values - a, j and 3\r\n  for (let i = 0; i < uniqueValues.length; i++) {\r\n    let result = []\r\n    let occurences = countOcurrences(charArray, uniqueValues[i])\r\n    if (occurences > 1) {\r\n      // get index of each one\r\n      for (let k = 0; k < charArray.length; k++) {\r\n        if (uniqueValues[i] === charArray[k]) {\r\n          result.push(fullHand[k])\r\n        }\r\n      }\r\n      let resultObj = {}\r\n      resultObj.result = result\r\n      let resultLength = result.length\r\n      if (resultLength === 2) {\r\n        resultObj.description = 'Pair'\r\n        resultObj.score = 2\r\n      }\r\n      else if (resultLength === 3) {\r\n        resultObj.description = 'Three of a kind'\r\n        resultObj.score = 6\r\n      } else if (resultLength === 4) {\r\n        resultObj.description = 'Four of a kind'\r\n        resultObj.score = 12\r\n      }\r\n      finalResult.push(resultObj)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport function getFifteenSums(cards) {\r\n  let totalSums = []\r\n  let sumPairs = getFifteenPairs(cards, 15)\r\n  let sumTriplets = getFifteenTriplets(cards, 15)\r\n  let sumQuartets = getFifteenQuartets(cards, 15)\r\n  let sumQuintet = getFifteenQuintet(cards, 15)\r\n\r\n  totalSums = [...sumPairs, ...sumTriplets, ...sumQuartets, ...sumQuintet]\r\n  return totalSums\r\n}\r\n\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\nfunction getFifteenPairs(cardHand, target = 15) {\r\n  // debugger\r\n  let hand = convertToIntegers(cardHand)\r\n  let result = twoSum(hand, target)\r\n  let fifteenPairs = []\r\n  for (var i = 0; i < result.length; i++) {\r\n    fifteenPairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return fifteenPairs\r\n}\r\n\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\nfunction getFifteenTriplets(cardHand, target = 15) {\r\n  let hand = convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0\r\n  // let intermediateResult = []\r\n  let fifteenTriplets = []\r\n  for (let j = start + 1; j < hand.length + 2; j++) {\r\n    let result = twoSum(hand, pairTarget)\r\n    for (var p = 0; p < result.length; p++) {\r\n      let temp = [cardHand[j - 1]]\r\n      temp.push(cardHand[result[p][0] + j])\r\n      temp.push(cardHand[result[p][1] + j])\r\n      fifteenTriplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return fifteenTriplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']]\r\n *\r\n */\r\nfunction getFifteenQuartets(cardHand, target = 15) {\r\n  let fifteenQuartets = []\r\n  let hand = convertToIntegers(cardHand)\r\n  for (let i = 0; i < hand.length; i++) {\r\n    let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4] - hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i, 1)\r\n      fifteenQuartets.push(result)\r\n    }\r\n  }\r\n  return fifteenQuartets\r\n}\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '2d', 'ad', 'as', 'ah']]\r\n *\r\n */\r\nfunction getFifteenQuintet(cardHand, target = 15) {\r\n  let fifteenQuartet = []\r\n  let hand = convertToIntegers(cardHand)\r\n  let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4]\r\n  if (sum === target) {\r\n    fifteenQuartet.push(cardHand)\r\n  }\r\n  return fifteenQuartet\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\nexport function getFlushes(cardHand) {\r\n  const copyOfHand = [...cardHand]\r\n  // check for five card flush (all suits are equal)\r\n  const checkAllEqual = arr => arr.every(card => card.suit === arr[0].suit)\r\n\r\n  let allEqual = checkAllEqual(copyOfHand)\r\n  if (allEqual) {\r\n    return copyOfHand\r\n  } else { // check for flush in forst four cards\r\n    copyOfHand.pop()\r\n    allEqual = checkAllEqual(copyOfHand)\r\n    if (allEqual) {\r\n      return copyOfHand\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\n// checks if the hand has a Jack that matches the suit of the community card\r\nexport function\r\n  getNibs(cards) {\r\n  let communitySuit = cards[4].suit\r\n  let result = []\r\n  for (let i = 0; i < cards.length - 1; i++) {\r\n    if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n      result.push(cards[i])\r\n      result.push(cards[4])\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n     * Returns sets of three, four or five cards that are sequential ie; a run\r\n     * @param {string[]} cardHand - Array of cardes\r\n     * @return {Array<Array<Card>>} Array of Cards representing a run\r\n     *\r\n     */\r\nexport function getRuns(cardHand) {\r\n  let sortedCards = sortCards(cardHand)\r\n  let runsResult = []\r\n\r\n  let runOf5Found = true\r\n\r\n  // start by looking for runs of 5\r\n  for (let i = 0; i < 4; i++) {\r\n    if (sortedCards[i + 1].val - sortedCards[i].val !== 1) {\r\n      runOf5Found = false\r\n      break\r\n    }\r\n  }\r\n\r\n  // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n  let runOf4Found = false\r\n  if (!runOf5Found) {\r\n    for (let i = 0; i < patternsOfFour.length; i++) {\r\n      if (findRun(sortedCards, patternsOfFour[i])) {\r\n        runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n        runOf4Found = true\r\n      }\r\n    }\r\n  }\r\n  // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  if (!runOf4Found && !runOf5Found) {\r\n    for (let i = 0; i < patternsOfThree.length; i++) {\r\n      if (findRun(sortedCards, patternsOfThree[i])) {\r\n        runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n      }\r\n    }\r\n  }\r\n  return runOf5Found ? [sortedCards] : runsResult\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getPairs, getFifteenSums, getFlushes, getNibs, getRuns } from '.././cribbage.js'\r\nconst uuid = require('uuid/v4')\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { showResults: false }\r\n\r\n    // all 10 combinations that a run of three can have\r\n    this.patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4],\r\n      [0, 2, 3]\r\n    ]\r\n  }\r\n\r\n  /**\r\n     * Highlight the cards in the hand that are part of the result\r\n     *\r\n     * @param {cards[]} Array of 5 cards\r\n     */\r\n  addHighlight(cards) {\r\n    const cardsToHighlight = cards.result ? cards.result : cards\r\n    for (var i = 0; i < cardsToHighlight.length; i++) {\r\n      const elem = document.getElementById(cardsToHighlight[i].code)\r\n      if (elem) {\r\n        elem.style.border = '3px solid blue'\r\n        elem.style['border-radius'] = '8px'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Remove highlights on the cards.\r\n     *\r\n     * @param {cards[]} Array of 5 cards\r\n     */\r\n  removeHighlight(cards) {\r\n\r\n    const cardsToRemoveHighlight = cards.result ? cards.result : cards\r\n    for (var i = 0; i < cardsToRemoveHighlight.length; i++) {\r\n      const elem = document.getElementById(cardsToRemoveHighlight[i].code)\r\n      if (elem) {\r\n        elem.style.border = null\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Adds up all the scores from the various results\r\n     *\r\n     * @param {cards[]} card Array of cards that are pairs\r\n     * @param {cards[]} card Array of cards that sum to 15\r\n     * @param {cards[]} card Array of cards that form a run\r\n     * @param {cards[]} card Array of cards that have the same suit (4 or 5)\r\n     * @param {cards[]} card Array of 2 cards that form nibs\r\n     */\r\n  tallyTheScores(pairResult, sumsResult, runsResult, flushResult, nibsResult) {\r\n    let score = 0\r\n    for (let i = 0; i < pairResult.length; i++) {\r\n      score = score + pairResult[i].score\r\n    }\r\n    for (let i = 0; i < sumsResult.length; i++) {\r\n      score = score + 2\r\n    }\r\n    for (let i = 0; i < runsResult.length; i++) {\r\n      score = score + runsResult[i].length\r\n    }\r\n    if (flushResult.length > 0) {\r\n      score = score + flushResult.length\r\n    }\r\n    if (nibsResult.length > 0) {\r\n      score = score + 1\r\n    }\r\n    return score\r\n  }\r\n\r\n  render() {\r\n    let pairResults = []\r\n    const { cards } = this.props\r\n\r\n    let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n    let showResults = this.state.showResults\r\n    let sumsResult, flushResult, runsResult, nibsResult\r\n    let fullHand = [...cards]\r\n    let totalScore = 0\r\n\r\n    if (fullHand.length === 5) {\r\n      sumsResult = getFifteenSums(fullHand)\r\n      runsResult = getRuns(fullHand)\r\n      pairResults = getPairs(fullHand)\r\n      flushResult = getFlushes(fullHand)\r\n      nibsResult = getNibs(cards)\r\n      // add all the results of the sums\r\n      totalScore = this.tallyTheScores(pairResults, sumsResult, runsResult, flushResult, nibsResult)\r\n\r\n    }\r\n\r\n    const showResultsCheckbox = <div className='show-results'>\r\n      <label className='cribbage-checkbox'><input type='checkbox' inline='true' checked={showResults} onChange={() => { this.setState({ showResults: !showResults }) }} />{showResults ? 'Hide results' : 'Show results'}</label>\r\n    </div>\r\n\r\n    // Only show results if the full hand has been dealt\r\n    if (fullHand.length === 5) {\r\n      displayPairs = <div>{pairResults.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>{result.description} - Points: {result.score}</span></div>\r\n          </section>\r\n\r\n        </div>\r\n      )}</div>\r\n\r\n      displaySums = <div>{sumsResult.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Sum to 15 - Points: 2</span></div>\r\n          </section>\r\n        </div>\r\n      )}</div>\r\n\r\n      displayRuns = <div>{runsResult.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span>Run - Points: {result.length}</span></div>\r\n          </section>\r\n        </div>\r\n      )}</div>\r\n\r\n      if (nibsResult.length > 0) {\r\n        displayNibs = <div>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(nibsResult)} onMouseOut={() => this.removeHighlight(nibsResult)}>\r\n            <div className='card-result'>{nibsResult.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Nibs - Points: 1</span></div>\r\n          </section>\r\n        </div>\r\n      }\r\n      if (flushResult.length > 0) {\r\n        displayFlush = <div>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(flushResult)} onMouseOut={() => this.removeHighlight(flushResult)}>\r\n            <div className='card-result'>{flushResult.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Flush - Points: {flushResult.length}</span></div>\r\n          </section>\r\n        </div>\r\n      } else {\r\n        displayFlush = <div />\r\n      }\r\n    }\r\n\r\n    if (fullHand.length === 5) {\r\n      return <React.Fragment>\r\n        <div>{showResultsCheckbox}</div>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <p className='cribbage-text'>Score = {totalScore}</p>\r\n          {displaySums}\r\n          {displayRuns}\r\n          {displayPairs}\r\n          {displayFlush}\r\n          {displayNibs}\r\n        </div>\r\n      </React.Fragment>\r\n    } else {\r\n      return (\r\n        <div>\r\n          {showResultsCheckbox}\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nResults.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  card: PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\nimport '.././index.css'\r\n\r\n// Component Hand\r\nconst CustomHand = (props) => {\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    props.setShowCustomHand(false)\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault()\r\n    props.onCustomHandChange(event.target.name, event.target.value)\r\n  }\r\n\r\n  const showCardOptions = (name, value) => {\r\n    return (\r\n      <div className='the-cards'>\r\n        <select className='custom-select' value={value} name={name} onChange={handleChange}>\r\n          <option value='ACE'>Ace</option>\r\n          <option value='2'>Two</option>\r\n          <option value='3'>Three</option>\r\n          <option value='4'>Four</option>\r\n          <option value='5'>Five</option>\r\n          <option value='6'>Six</option>\r\n          <option value='7'>Seven</option>\r\n          <option value='8'>Eight</option>\r\n          <option value='9'>Nine</option>\r\n          <option value='10'>Ten</option>\r\n          <option value='JACK'>Jack</option>\r\n          <option value='QUEEN'>Queen</option>\r\n          <option value='KING'>King</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n  const showSuitOptions = (name, suit = 'SPADES') => {\r\n    return (\r\n      <div className='the-suits'>\r\n        <select className='custom-select' value={suit} name={name} onChange={handleChange}>\r\n          <option value='HEARTS'>Hearts</option>\r\n          <option value='DIAMONDS'>Diamonds</option>\r\n          <option value='SPADES'>Spades</option>\r\n          <option value='CLUBS'>Clubs</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const showCustomHandCheckbox = <div className='show-results'>\r\n    <label className='cribbage-checkbox'> <input type='checkbox' inline='true' checked={props.showCustomHand} onChange={props.setShowCustomHand} />Modify your cards</label>\r\n  </div>\r\n\r\n  if (props.cards.length === 5) {\r\n    return (\r\n      <React.Fragment>\r\n        <div>{showCustomHandCheckbox}</div>\r\n        <div style={{ display: (props.showCustomHand ? 'block' : 'none') }}>\r\n          <form onSubmit={handleSubmit}>\r\n            <div id='card-options'>\r\n              <div className='card-option'>\r\n                {showCardOptions('card1', props.cards[0].value)}\r\n                {showSuitOptions('suit1', props.cards[0].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card2', props.cards[1].value)}\r\n                {showSuitOptions('suit2', props.cards[1].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card3', props.cards[2].value)}\r\n                {showSuitOptions('suit3', props.cards[2].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card4', props.cards[3].value)}\r\n                {showSuitOptions('suit4', props.cards[3].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card5', props.cards[4].value)}\r\n                {showSuitOptions('suit5', props.cards[4].suit)}\r\n              </div>\r\n            </div>\r\n          </form >\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  } else {\r\n    return (null)\r\n  }\r\n}\r\nexport default CustomHand\r\n","import React, { Component } from 'react'\r\nimport swal from 'sweetalert'\r\nimport Hand from './components/Hand'\r\nimport Results from './components/Results'\r\nimport CustomHand from './forms/CustomHand'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.getHand = this.getHand.bind(this)\r\n    this.sortHand = this.sortHand.bind(this)\r\n    this.setShowCustomHand = this.setShowCustomHand.bind(this)\r\n    this.onCustomHandChange = this.onCustomHandChange.bind(this)\r\n    this.state = {\r\n      'deck': [],\r\n      'hand': [],\r\n      'customHand': [],\r\n      'cardsLeft': 52,\r\n      'showCustomHand': false\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        this.setState({\r\n          deck_id: result.deck_id,\r\n          cardsLeft: result.remaining\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n    * Used to map the value of the card to the code used by the cards API\r\n    */\r\n  codeMap = {\r\n    ACE: 'A',\r\n    2: 2,\r\n    3: 3,\r\n    4: 4,\r\n    5: 5,\r\n    6: 6,\r\n    7: 7,\r\n    8: 8,\r\n    9: 9,\r\n    10: 0,\r\n    JACK: 'J',\r\n    QUEEN: 'Q',\r\n    KING: 'K'\r\n  }\r\n\r\n  /*\r\n   * Gets a hand (5 cards) from the deckofcards API. A deck must exist.\r\n   *\r\n   * @returns {Cards[]} Array of 5 cards\r\n   * card.code        eg. JS, AD, 9H\r\n   * card.image       eg.\r\n   * card.cardsImages\r\n   * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n   * card.value       eg. JACK, ACE, 9\r\n   */\r\n  getHand() {\r\n    // make sure there are enough cards left in the deck\r\n    let url\r\n    if (this.state.cardsLeft < 5) {\r\n      swal('New deck', 'There are not enough cards left in the deck. Now using new deck', 'info')\r\n      url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n      fetch(url)\r\n        .then(response =>\r\n          response.json()\r\n        )\r\n        .then(result => {\r\n          this.setState({\r\n            deck_id: result.deck_id,\r\n            cardsLeft: result.remaining\r\n          })\r\n          url = 'https://deckofcardsapi.com/api/deck/' + result.deck_id + '/draw/?count=5'\r\n        })\r\n        .then(() => {\r\n          fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n              this.setState({\r\n                hand: result.cards,\r\n                cardsLeft: result.remaining\r\n              })\r\n            })\r\n        })\r\n    } else {\r\n      url = 'https://deckofcardsapi.com/api/deck/' + this.state.deck_id + '/draw/?count=5'\r\n      fetch(url)\r\n        .then(response =>\r\n          response.json()\r\n        )\r\n        .then(result => {\r\n          this.setState({\r\n            hand: result.cards,\r\n            cardsLeft: result.remaining\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Compares two cards to determine if the 'val' property of a card in\r\n     * greater of less than another card. Used by the sartHand(method)\r\n     *\r\n     * @param {Card} card Instance of a card.\r\n     * @param {Card} card Instance of the card to compare to.\r\n     * @returns {number} '1' if greater than, '-1' if less than\r\n     */\r\n  compareCardValues(cardA, cardB) {\r\n    let comparison = 0\r\n    if (cardA.val > cardB.val) {\r\n      comparison = 1\r\n    } else if (cardA.val < cardB.val) {\r\n      comparison = -1\r\n    }\r\n    return comparison\r\n  }\r\n\r\n  /**\r\n     * Sorts the hand based on the val property of each card in the hand\r\n     *\r\n     */\r\n  sortHand() {\r\n    let sortedHand = [...this.state.hand]\r\n    sortedHand.sort(this.compareCardValues)\r\n    this.setState({\r\n      hand: sortedHand\r\n    })\r\n  }\r\n\r\n  /**\r\n     * Toggles the value of the 'showCustomHand' state value\r\n     *\r\n     */\r\n  setShowCustomHand() {\r\n    let showCustomHand = this.state.showCustomHand\r\n    this.setState({ showCustomHand: !showCustomHand })\r\n  }\r\n\r\n  /**\r\n     * Generates the correct card code based on value and suit\r\n     *\r\n     * @param {string} value value of the card\r\n     * @param {string} suit suit of the card\r\n     * @return {string} the generated code\r\n     */\r\n  getCode(value, suit) {\r\n    return `${this.codeMap[value]}${suit.charAt(0)}`\r\n  }\r\n\r\n\r\n  /**\r\n     * Determine if the given card already exists in the hand\r\n     *\r\n     * @param {number} position the position in the hand of the card being changed\r\n     * @param {string} value value of the card (could be the value or the suit)\r\n     * @param {string} type flag to indicate if the suit or the value is changing\r\n     * @return {boolean} true if the card already exists in the hand, false if not.\r\n     */\r\n  alreadyExists(position, value, type) {\r\n    let code\r\n    if (type === 'card') {\r\n      const suit = this.state.hand[position].suit\r\n      code = this.getCode(value, suit)\r\n    }\r\n    // suit part\r\n    if (type === 'suit') {\r\n      const val = this.state.hand[position].value\r\n      code = this.getCode(val, value)\r\n    }\r\n    for (let i = 0; i < this.state.hand.length; i++) {\r\n      if (this.state.hand[i].code === code) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n\r\n  }\r\n\r\n  /**\r\n     * Change the value of a card in the hand\r\n     *\r\n     * @param {card} card the card that is to be changed\r\n     * @param {string} value the new value\r\n     * @return {card} card the new card with the updated value\r\n     */\r\n  changeCard(card, value) {\r\n    card.value = value\r\n\r\n    const newCode = this.getCode(value, card.suit)\r\n    card.code = newCode\r\n    const newImage = `https://deckofcardsapi.com/static/img/${newCode}.png`\r\n    card.image = newImage\r\n    return card\r\n  }\r\n\r\n  /**\r\n     * Change the suit of a card in the hand\r\n     *\r\n     * @param {card} card the card that is to be changed\r\n     * @param {string} suit the new suit\r\n     * @return {card} the new card with the updated suit\r\n     */\r\n  changeSuit(card, suit) {\r\n    card.suit = suit\r\n    const newCode = this.getCode(card.value, suit)\r\n    card.code = newCode\r\n    const newImage = `https://deckofcardsapi.com/static/img/${newCode}.png`\r\n    card.image = newImage\r\n    return card\r\n  }\r\n\r\n  /**\r\n     * Event fires when a card in the hand has been changed\r\n     *\r\n     * @param {string} name item to be changed ('card' or 'suit')\r\n     * @param {string} value the new value or suit\r\n     */\r\n  onCustomHandChange(name, value) {\r\n    // can determine the position in the hand array from he last character of the name\r\n    let position = name.charAt(name.length - 1) - 1\r\n    let hand = [...this.state.hand]\r\n    let card = hand[position]\r\n    let newCard\r\n    let toChange = name.slice(0, 4)   // 'suit' or 'card'\r\n    if (toChange === 'card') {\r\n      if (!this.alreadyExists(position, value, toChange)) {\r\n        newCard = this.changeCard(card, value)\r\n      } else {\r\n        swal('Oops!', 'You cannot have two identical cards in a hand.', 'warning')\r\n        return\r\n      }\r\n    } else if (toChange === 'suit') {\r\n      if (!this.alreadyExists(position, value, toChange)) {\r\n        newCard = this.changeSuit(card, value)\r\n      } else {\r\n        swal('Oops', 'You cannot have two identical cards in a hand.', 'warning')\r\n        return\r\n      }\r\n    }\r\n    hand[position] = newCard\r\n    this.setState({ hand })\r\n  }\r\n\r\n  render() {\r\n\r\n    const cardsLeft = this.state.cardsLeft\r\n    const showCustomHand = this.state.showCustomHand\r\n    const setShowCustomHand = this.setShowCustomHand\r\n    const onCustomHandChange = this.onCustomHandChange\r\n\r\n    let cards\r\n    if (this.state.hand) {\r\n      cards = this.state.hand\r\n    } else {\r\n      cards = []\r\n    }\r\n\r\n    let buttonText = ''\r\n    if (cardsLeft === 52) {\r\n      buttonText = 'Let\\'s play'\r\n    } else {\r\n      buttonText = 'Get new cards'\r\n    }\r\n    return (\r\n      <div className='container'>\r\n        <h1 className='cribbage-text'>Cribbage Hand Practice Tool</h1>\r\n        <p className='cribbage-text'>Practice your point counting skills.</p>\r\n\r\n        <div className='result-row'>\r\n          <React.Fragment>\r\n            <Hand getHand={this.getHand} sortHand={this.sortHand} cardsLeft={cardsLeft} cards={cards} buttonText={buttonText} />\r\n          </React.Fragment>\r\n        </div>\r\n        <CustomHand cards={cards} showCustomHand={showCustomHand} setShowCustomHand={setShowCustomHand} onCustomHandChange={onCustomHandChange} />\r\n        <Results cards={cards} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}