{"version":3,"sources":["Deck.js","Hand.js","cribbage.js","Results.js","App.js","index.js"],"names":["Deck","cardImage","_this","this","deck_id","props","code","card","image","react_default","a","createElement","className","src","alt","onClick","turnOverCard","Component","Hand","cardsImages","cards","cardsLeft","console","log","length","map","key","getHand","patternsOfThree","patternsOfFour","convertToIntegers","value","isNaN","parseInt","twoSum","arr","target","arguments","undefined","result","i","j","push","findRun","hand","pattern","runFound","k","val","countOcurrences","c","count","getFifteenSums","sumPairs","cardHand","pairs","getFifteenPairs","sumTriplets","pairTarget","shift","triplets","start","p","temp","getFifteenTriplets","sumQuartets","finalResult","sum","Object","toConsumableArray","splice","getFifteenQuartets","sumQuintet","getFifteenQuintet","concat","getRuns","sortedCards","copyOfCards","sort","b","sortCards","runsResult","runOf5Found","runOf4Found","description","score","Results","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showResults","pairResult","sumsResult","nibsResult","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","flushResult","_this2","pairResults","_this$props","fullHand","totalScore","charArray","convertToChars","uniqueSet","Set","uniqueValues","resultObj","resultLength","getPairs","copyOfHand","checkAllEqual","every","suit","allEqual","pop","getFlushes","communitySuit","getNibs","tallyTheScores","showResultsCheckbox","type","inline","checked","setState","style","display","App","bind","assertThisInitialized","deck","fetch","then","response","json","remaining","DeckId","_this3","url","communityCard","_this4","src_Hand","src_Deck","src_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"wOA6BeA,mLA1BJ,IAKHC,EALGC,EAAAC,KACCC,EAAYD,KAAKE,MAAjBD,QACFE,EAAOH,KAAKE,MAAME,KAAKD,KACvBE,EAAQL,KAAKE,MAAME,KAAKC,MAa9B,OATEP,EADEO,EACUC,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKL,EAAOM,IAAKR,KAG7BG,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAI,kBAAkBC,IAAKR,KAKnDG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMb,EAAKG,MAAMW,aAAa,CAAEZ,cAAjD,aACAK,EAAAC,EAAAC,cAAA,6BACCV,UArBUgB,aCkCJC,mLAjCJ,IASHC,EATGjB,EAAAC,KACCC,EAAYD,KAAKE,MAAjBD,QACFgB,EAAQjB,KAAKE,MAAMe,MACnBC,EAAYlB,KAAKE,MAAMgB,UAoB7B,OAlBAC,QAAQC,IADK,QAIbD,QAAQC,IAAI,WAAYpB,KAAKE,OAG3Bc,EADEC,EAAMI,OAAS,EACHJ,EAAMK,IAAI,SAAAlB,GACtB,OAAOE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKN,EAAKC,MAAOkB,IAAKnB,EAAKD,KAAMQ,IAAKP,EAAKD,SAIxEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAI,kBAAkBC,IAAI,MAChDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAI,kBAAkBC,IAAI,MAChDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAI,kBAAkBC,IAAI,MAChDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAI,kBAAkBC,IAAI,OAIpDL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASG,QAAS,kBAAMb,EAAKG,MAAMsB,QAAQ,CAAEvB,cAA/D,YACAK,EAAAC,EAAAC,cAAA,uCAA+BU,GAC/BZ,EAAAC,EAAAC,cAAA,WAAMQ,WA5BKF,oBCAbW,EAAkB,CACtB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIHC,EAAiB,CACrB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAUZ,SAASC,EAAkBV,GAWzB,OAViBA,EAAMK,IAAI,SAAAlB,GAAI,OAAIA,EAAKwB,QAEZN,IAAI,SAASlB,GAMvC,OAJEA,EADEyB,MAAMzB,GACS,QAATA,EAAkB,EAAI,GAEvB0B,SAAS1B,EAAM,MA+C5B,SAAS2B,EAAOC,GAEd,IAFgC,IAAbC,EAAaC,UAAAb,OAAA,QAAAc,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACxBE,EAAS,GACJC,EAAI,EAAGA,EAAIL,EAAIX,OAAQgB,IAC9B,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIN,EAAIX,OAAQiB,IAC9BN,EAAIK,GAAKL,EAAIM,KAAOL,GACtBG,EAAOG,KAAK,CAACF,EAAGC,IAItB,OAAOF,EA2BT,SAASI,EAAQC,EAAMC,GAErB,IADA,IAAIC,GAAW,EACNC,EAAI,EAAGA,EAAIF,EAAQrB,OAAS,EAAGuB,IAAK,CAE5B,IADFH,EAAKC,EAAQE,EAAI,IAAIC,IAAMJ,EAAKC,EAAQE,IAAIC,MAIvDF,GAAW,GAGf,OAAOA,EAGT,SAASG,EAAgBd,EAAKe,GAE5B,IADA,IAAIC,EAAQ,EACHX,EAAI,EAAGA,EAAIL,EAAIX,OAAQgB,IAC1BL,EAAIK,KAAOU,GACbC,IAGJ,OAAOA,EA6CF,SAASC,EAAehC,GAC7B,IACIiC,EAmBN,SAAyBC,GAKvB,IAL8C,IAAblB,EAAaC,UAAAb,OAAA,QAAAc,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAGtCE,EAASL,EADFJ,EAAkBwB,GACHlB,GACtBmB,EAAQ,GACHf,EAAI,EAAGA,EAAID,EAAOf,OAAQgB,IACjCe,EAAMb,KAAK,CAACY,EAASf,EAAOC,GAAG,IAAKc,EAASf,EAAOC,GAAG,MAEzD,OAAOe,EA3BQC,CAAgBpC,EAAO,IAClCqC,EAsCN,SAA4BH,GAAuB,IAAblB,EAAaC,UAAAb,OAAA,QAAAc,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACzCO,EAAOd,EAAkBwB,GACzBI,EAAatB,EAASQ,EAAK,GAC/BA,EAAKe,QAIL,IAHA,IAEIC,EAAW,GACNnB,EAAIoB,EAAWpB,EAAIG,EAAKpB,OAAS,EAAGiB,IAAK,CAEhD,IADA,IAAIF,EAASL,EAAOU,EAAMc,GACjBI,EAAI,EAAGA,EAAIvB,EAAOf,OAAQsC,IAAK,CACtC,IAAIC,EAAO,CAACT,EAASb,EAAI,IACzBsB,EAAKrB,KAAKY,EAASf,EAAOuB,GAAG,GAAKrB,IAClCsB,EAAKrB,KAAKY,EAASf,EAAOuB,GAAG,GAAKrB,IAClCmB,EAASlB,KAAKqB,GAEhBL,EAAatB,EAASQ,EAAK,GAC3BA,EAAKe,QAEP,OAAOC,EAxDWI,CAAmB5C,EAAO,IACxC6C,EAmEN,SAA4BX,GAG1B,IAHiD,IAAblB,EAAaC,UAAAb,OAAA,QAAAc,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACzC6B,EAAc,GACdtB,EAAOd,EAAkBwB,GACpBd,EAAI,EAAGA,EAAII,EAAKpB,OAAQgB,IAAK,CACpC,IAAI2B,EAAMvB,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAKJ,GACjE,GAAI2B,IAAQ/B,EAAQ,CAClB,IAAIG,EAAM6B,OAAAC,EAAA,EAAAD,CAAOd,GACjBf,EAAO+B,OAAO9B,EAAG,GACjB0B,EAAYxB,KAAKH,IAGrB,OAAO2B,EA9EWK,CAAmBnD,EAAO,IACxCoD,EAwFN,SAA2BlB,GAAuB,IAAblB,EAAaC,UAAAb,OAAA,QAAAc,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACxC6B,EAAc,GACdtB,EAAOd,EAAkBwB,GACnBV,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,KAC3CR,GACV8B,EAAYxB,KAAKY,GAEnB,OAAOY,EA/FUO,CAAkBrD,EAAO,IAG1C,MADS,GAAAsD,OAAAN,OAAAC,EAAA,EAAAD,CAAOf,GAAPe,OAAAC,EAAA,EAAAD,CAAoBX,GAApBW,OAAAC,EAAA,EAAAD,CAAoCH,GAApCG,OAAAC,EAAA,EAAAD,CAAoDI,IA2IxD,SAASG,EAAQrB,GAOtB,IANA,IAAIsB,EAzRN,SAAmBxD,GAEjB,IADA,IAAIyD,EAAWT,OAAAC,EAAA,EAAAD,CAAOhD,GACboB,EAAI,EAAGA,EAAIpB,EAAMI,OAAQgB,IAEhC,OAAQqC,EAAYrC,GAAGT,OACrB,IAAK,MACH8C,EAAYrC,GAAGQ,IAAM,EACrB,MACF,IAAK,OACH6B,EAAYrC,GAAGQ,IAAM,GACrB,MACF,IAAK,QACH6B,EAAYrC,GAAGQ,IAAM,GACrB,MACF,IAAK,OACH6B,EAAYrC,GAAGQ,IAAM,GACrB,MACF,QACE6B,EAAYrC,GAAGQ,IAAMf,SAAS4C,EAAYrC,GAAGT,MAAO,IAI1D,OADA8C,EAAYC,KAAK,SAACpE,EAAGqE,GAAJ,OAAUrE,EAAEsC,IAAM+B,EAAE/B,MAC9B6B,EAmQWG,CAAU1B,GACxB2B,EAAa,GAEbC,GAAc,EAGT1C,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIoC,EAAYpC,EAAI,GAAGQ,IAAM4B,EAAYpC,GAAGQ,MAAQ,EAAG,CACrDkC,GAAc,EACd,MAKJ,IAAIC,GAAc,EAClB,IAAKD,EACH,IAAK,IAAI1C,EAAI,EAAGA,EAAIX,EAAeL,OAAQgB,IACrCG,EAAQiC,EAAa/C,EAAeW,MACtCyC,EAAWvC,KAAK,CAACkC,EAAY/C,EAAeW,GAAG,IAAKoC,EAAY/C,EAAeW,GAAG,IAAKoC,EAAY/C,EAAeW,GAAG,IAAKoC,EAAY/C,EAAeW,GAAG,MACxJ2C,GAAc,GAKpB,IAAKA,EACH,IAAK,IAAI3C,EAAI,EAAGA,EAAIZ,EAAgBJ,OAAQgB,IACtCG,EAAQiC,EAAahD,EAAgBY,MACvCyC,EAAWvC,KAAK,CAACkC,EAAYhD,EAAgBY,GAAG,IAAKoC,EAAYhD,EAAgBY,GAAG,IAAKoC,EAAYhD,EAAgBY,GAAG,MACxHyC,EAAWG,YAAc,OACzBH,EAAWI,MAAQ,GAIzB,OAAOJ,MC/KMK,cA3Lb,SAAAA,EAAYjF,GAAO,IAAAH,EAAA,OAAAkE,OAAAmB,EAAA,EAAAnB,CAAAjE,KAAAmF,IACjBpF,EAAAkE,OAAAoB,EAAA,EAAApB,CAAAjE,KAAAiE,OAAAqB,EAAA,EAAArB,CAAAkB,GAAAI,KAAAvF,KAAME,KACDsF,MAAQ,CAAEC,aAAa,GAG5B1F,EAAK0B,gBAAkB,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAfQ1B,8EAoBJ2F,EAAYC,EAAYb,EAAYc,GAEjD,IADA,IAAIV,EAAQ,EACH7C,EAAI,EAAGA,EAAIqD,EAAWrE,OAAQgB,IACrC6C,GAAgBQ,EAAWrD,GAAG6C,MAEhC,IAAK,IAAI7C,EAAI,EAAGA,EAAIsD,EAAWtE,OAAQgB,IACrC6C,GAAgB,EAElB,IAAK,IAAI7C,EAAI,EAAGA,EAAIyC,EAAWzD,OAAQgB,IACrC6C,GAAgBJ,EAAWzC,GAAGhB,OAKhC,OAHIuE,EAAWvE,OAAS,IACtB6D,GAAgB,GAEXA,mCAGA,IAIHW,EAAcC,EAAaC,EAAaC,EAAcC,EAEtDN,EAAYO,EAAapB,EAAYc,EANlCO,EAAAnG,KACHoG,EAAc,GADXC,EAEiBrG,KAAKE,MAArBe,EAFDoF,EAECpF,MAAOb,EAFRiG,EAEQjG,KAGXqF,EAAczF,KAAKwF,MAAMC,YAEzBa,EAAQrC,OAAAC,EAAA,EAAAD,CAAOhD,GACnBqF,EAAS/D,KAAKnC,GACd,IAAImG,EAAa,EAEO,IAApBD,EAASjF,SACX+E,ED4FC,SAAkBE,GAWvB,IARA,IAAIE,EA5CN,SAAwBvF,GACtB,IAAIuF,EAAY,GAIhB,OAHAvF,EAAMK,IAAI,SAASlB,GACjB,OAAOoG,EAAUjE,KAAKnC,EAAKwB,SAEtB4E,EAuCSC,CAAeH,GAEzBI,EAAY,IAAIC,IAAIH,GAGpBI,EAAY3C,OAAAC,EAAA,EAAAD,CAAOyC,GACrB3C,EAAc,GAET1B,EAAI,EAAGA,EAAIuE,EAAavF,OAAQgB,IAAK,CAC5C,IAAID,EAAS,GAEb,GADiBU,EAAgB0D,EAAWI,EAAavE,IACxC,EAAG,CAElB,IAAK,IAAIO,EAAI,EAAGA,EAAI4D,EAAUnF,OAAQuB,IAChCgE,EAAavE,KAAOmE,EAAU5D,IAChCR,EAAOG,KAAK+D,EAAS1D,IAGzB,IAAIiE,EAAY,GAChBA,EAAUzE,OAASA,EACnB,IAAI0E,EAAe1E,EAAOf,OACL,IAAjByF,GACFD,EAAU5B,YAAc,OACxB4B,EAAU3B,MAAQ,GAEM,IAAjB4B,GACPD,EAAU5B,YAAc,kBACxB4B,EAAU3B,MAAQ,GACQ,IAAjB4B,IACTD,EAAU5B,YAAc,iBACxB4B,EAAU3B,MAAQ,IAEpBnB,EAAYxB,KAAKsE,IAGrB,OAAO9C,EClIWgD,CAAST,GACvBnF,QAAQC,IAAI,iCACZD,QAAQC,IAAIgF,GAEZT,EAAa1C,EAAeqD,GAC5BnF,QAAQC,IAAI,8CACZD,QAAQC,IAAIuE,GAGZO,EDyOC,SAAoB/C,GACzB,IAAM6D,EAAU/C,OAAAC,EAAA,EAAAD,CAAOd,GAEjB8D,EAAgB,SAAAjF,GAAG,OAAIA,EAAIkF,MAAM,SAAA9G,GAAI,OAAIA,EAAK+G,OAASnF,EAAI,GAAGmF,QAEhEC,EAAWH,EAAcD,GAC7B,OAAII,EACKJ,GAEPA,EAAWK,OACXD,EAAWH,EAAcD,IAEhBA,EAGJ,ICxPWM,CAAWhB,GACzBnF,QAAQC,IAAI,uCACZD,QAAQC,IAAI8E,GAEZpB,EAAaN,EAAQ8B,GACrBnF,QAAQC,IAAI,uCACZD,QAAQC,IAAI,sBAAuB0D,GACnC3D,QAAQC,IAAI0D,GAEZc,EDmPC,SACG3E,EAAOb,GAGf,IAFA,IAAImH,EAAgBnH,EAAK+G,KACrB/E,EAAS,GACJC,EAAI,EAAGA,EAAIpB,EAAMI,OAAQgB,IACT,SAAnBpB,EAAMoB,GAAGT,OAAoBX,EAAMoB,GAAG8E,OAASI,GACjDnF,EAAOG,KAAKnC,GAGhB,OAAOgC,EC5PUoF,CAAQvG,EAAOb,GAC5Be,QAAQC,IAAI,kBAAmBH,GAC/BE,QAAQC,IAAI,iBAAkBhB,GAC9Be,QAAQC,IAAI,sBAAuBwE,GACnCzE,QAAQC,IAAI,sCACZD,QAAQC,IAAIwE,GAIZW,EAAavG,KAAKyH,eAAerB,EAAaT,EAAYb,EAAYc,IAOxE,IAAM8B,EAAsBpH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACzCH,EAAAC,EAAAC,cAAA,SAAOmH,KAAK,WAAWC,OAAO,OAAOC,QAASpC,EAAa7E,QAAS,WAAQuF,EAAK2B,SAAS,CAAErC,aAAcA,OAC1GnF,EAAAC,EAAAC,cAAA,4BA6EF,OAzEwB,IAApB8F,EAASjF,SACXwE,EAAevF,EAAAC,EAAAC,cAAA,WAAM4F,EAAY9E,IAAI,SAAAc,GAAM,OACzC9B,EAAAC,EAAAC,cAAA,OAAKuH,MAAO,CAAEC,QAAUvC,EAAc,QAAU,SAC9CnF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgB2B,EAAOA,OAAOd,IAAI,SAAAlB,GAAI,OACnDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKN,EAAKC,MAAOkB,IAAKnB,EAAKD,KAAMQ,IAAKP,EAAKD,UAG1EG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe2B,EAAO6C,YAArC,cAA6D7C,EAAO8C,aAM5EY,EAAcxF,EAAAC,EAAAC,cAAA,WAAMmF,EAAWrE,IAAI,SAAAc,GAAM,OACvC9B,EAAAC,EAAAC,cAAA,OAAKuH,MAAO,CAAEC,QAAUvC,EAAc,QAAU,SAC9CnF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgB2B,EAAOd,IAAI,SAAAlB,GAAI,OAC5CE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKN,EAAKC,MAAOkB,IAAKnB,EAAKD,KAAMQ,IAAKP,EAAKD,UAG1EG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,+BAMRsF,EAAczF,EAAAC,EAAAC,cAAA,WAAMsE,EAAWxD,IAAI,SAAAc,GAAM,OACvC9B,EAAAC,EAAAC,cAAA,OAAKuH,MAAO,CAAEC,QAAUvC,EAAc,QAAU,SAC9CnF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgB2B,EAAOd,IAAI,SAAAlB,GAAI,OAC5CE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKN,EAAKC,MAAOkB,IAAKnB,EAAKD,KAAMQ,IAAKP,EAAKD,UAG1EG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,iBAA4C2B,EAAOf,cAM3D4E,EAAc3F,EAAAC,EAAAC,cAAA,WAAMoF,EAAWtE,IAAI,SAAAc,GAAM,OACvC9B,EAAAC,EAAAC,cAAA,OAAKuH,MAAO,CAAEC,QAAUvC,EAAc,QAAU,SAC9CnF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAK0B,EAAO/B,MAAOkB,IAAKa,EAAOjC,KAAMQ,IAAKyB,EAAOjC,QAEhFG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,0BAMNuF,EADEE,EAAY7E,OAAS,EACRf,EAAAC,EAAAC,cAAA,OAAKuH,MAAO,CAAEC,QAAUvC,EAAc,QAAU,SAC7DnF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgByF,EAAY5E,IAAI,SAAAlB,GAAI,OACjDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKN,EAAKC,MAAOkB,IAAKnB,EAAKD,KAAMQ,IAAKP,EAAKD,UAG1EG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,wBAKSH,EAAAC,EAAAC,cAAA,aAKK,IAApB8F,EAASjF,OACJf,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,WAAMkH,GACNpH,EAAAC,EAAAC,cAAA,OAAKuH,MAAO,CAAEC,QAAUvC,EAAc,QAAU,SAC9CnF,EAAAC,EAAAC,cAAA,6BAAqB+F,IAEtBV,EACAC,EACAC,EACAC,EACAC,GAID3F,EAAAC,EAAAC,cAAA,WACGkH,EACDpH,EAAAC,EAAAC,cAAA,yCAnLYM,aCgIPmH,cA7Hb,SAAAA,EAAY/H,GAAO,IAAAH,EAAA,OAAAkE,OAAAmB,EAAA,EAAAnB,CAAAjE,KAAAiI,IACjBlI,EAAAkE,OAAAoB,EAAA,EAAApB,CAAAjE,KAAAiE,OAAAqB,EAAA,EAAArB,CAAAgE,GAAA1C,KAAAvF,KAAME,KACDW,aAAed,EAAKc,aAAaqH,KAAlBjE,OAAAkE,EAAA,EAAAlE,QAAAkE,EAAA,EAAAlE,CAAAlE,KACpBA,EAAKyB,QAAUzB,EAAKyB,QAAQ0G,KAAbjE,OAAAkE,EAAA,EAAAlE,QAAAkE,EAAA,EAAAlE,CAAAlE,KACfA,EAAKyF,MAAQ,CACX4C,KAAQ,GACRlH,UAAa,IANEnB,mFAUC,IAAAoG,EAAAnG,KAMlBqI,MADY,iEAETC,KAAK,SAAAC,GAAQ,OACZA,EAASC,SAEVF,KAAK,SAAAlG,GACJjB,QAAQC,IAAI,YAAa+E,EAAKX,OAC9BrE,QAAQC,IAAI,WAAYgB,GACxB+D,EAAK2B,SAAS,CACZM,KAAMhG,EACNlB,UAAWkB,EAAOqG,mDAKbC,GAAQ,IAAAC,EAAA3I,KAEb4I,EAAM,uCAAyCF,EAAOzI,QAAU,iBACtEoI,MAAMO,GACHN,KAAK,SAAAC,GAAQ,OACZA,EAASC,SAEVF,KAAK,SAAAlG,GAKJuG,EAAKb,SAAS,CACZe,cAAezG,EAAOnB,MAAM,GAC5BC,UAAWkB,EAAOqG,kDAOdC,GAOV1I,KAAK8H,SAAS,CACZrF,KAPc,CACd,CAAEb,MAAO,IAAKzB,KAAM,KAAME,MAAO,+CAAgD8G,KAAM,YACvF,CAAEvF,MAAO,IAAKzB,KAAM,KAAME,MAAO,+CAAgD8G,KAAM,SACvF,CAAEvF,MAAO,IAAKzB,KAAM,KAAME,MAAO,+CAAgD8G,KAAM,UACvF,CAAEvF,MAAO,IAAKzB,KAAM,KAAME,MAAO,+CAAgD8G,KAAM,6CAmBnFuB,GAAQ,IAAAI,EAAA9I,KAER4I,EAAM,uCAAyCF,EAAOzI,QAAU,iBACtEoI,MAAMO,GACHN,KAAK,SAAAC,GAAQ,OACZA,EAASC,SAEVF,KAAK,SAAAlG,GACJ0G,EAAKhB,SAAS,CACZrF,KAAML,EAAOnB,MACbC,UAAWkB,EAAOqG,+CAKjB,IAGHrI,EAOAa,EATIhB,EAAYD,KAAKwF,MAAM4C,KAAvBnI,QACFiB,EAAYlB,KAAKwF,MAAMtE,UAe7B,OAZEd,EADEJ,KAAKwF,MAAMqD,cACN7I,KAAKwF,MAAMqD,cAEX,GAKP5H,EADEjB,KAAKwF,MAAM/C,KACLzC,KAAKwF,MAAM/C,KAEX,GAIRnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACuI,EAAD,CAAM9I,QAASA,EAASuB,QAASxB,KAAKwB,QAASN,UAAWA,EAAWD,MAAOA,KAE9EX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAACwI,EAAD,CAAM/I,QAASA,EAASY,aAAcb,KAAKa,aAAcT,KAAMA,MAGnEE,EAAAC,EAAAC,cAACyI,EAAD,CAAShI,MAAOA,EAAOb,KAAMA,YAxHnBU,mBCAlBoI,IAASC,OAAO7I,EAAAC,EAAAC,cAAC4I,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.7b697452.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n  render() {\r\n    const { deck_id } = this.props\r\n    const code = this.props.card.code\r\n    const image = this.props.card.image\r\n\r\n    let cardImage\r\n    if (image) {\r\n      cardImage = <div>\r\n        <img className='hand' src={image} alt={code} />\r\n      </div>\r\n    } else {\r\n      cardImage = <div>\r\n        <img className='hand' src='./card_back.jpg' alt={code} />\r\n      </div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={() => this.props.turnOverCard({ deck_id })}>Turn Over</button>\r\n        <div>Community Card</div>\r\n        {cardImage}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Deck\r\n","import React, { Component } from 'react';\r\n\r\nclass Hand extends Component {\r\n  render() {\r\n    const { deck_id } = this.props\r\n    const cards = this.props.cards\r\n    const cardsLeft = this.props.cardsLeft\r\n    const fred = 'temp'\r\n    console.log(fred)\r\n\r\n\r\n    console.log('PPPPPPP ', this.props)\r\n    let cardsImages\r\n    if (cards.length > 0) {\r\n      cardsImages = cards.map(card => {\r\n        return <img className='hand' src={card.image} key={card.code} alt={card.code} />\r\n      })\r\n    } else {\r\n      cardsImages =\r\n        <div>\r\n          <img className='hand' src='./card_back.jpg' alt='1' />\r\n          <img className='hand' src='./card_back.jpg' alt='2' />\r\n          <img className='hand' src='./card_back.jpg' alt='3' />\r\n          <img className='hand' src='./card_back.jpg' alt='4' />\r\n        </div>\r\n    }\r\n    return (\r\n      <div>\r\n        <button className='freddy' onClick={() => this.props.getHand({ deck_id })}>Get Hand</button>\r\n        <div>Cards remaining in deck: {cardsLeft}</div>\r\n        <div>{cardsImages}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Hand\r\n","\r\n// all 10 combinations that a run of three can have\r\nconst patternsOfThree = [\r\n  [0, 1, 2],\r\n  [0, 1, 3],\r\n  [1, 2, 3],\r\n  [0, 1, 4],\r\n  [0, 2, 4],\r\n  [1, 2, 4],\r\n  [0, 3, 4],\r\n  [1, 3, 4],\r\n  [2, 3, 4],\r\n  [0, 2, 3]\r\n]\r\n\r\n// all 4 combinations that a run of 4 can have\r\nconst patternsOfFour = [\r\n  [0, 1, 2, 3],\r\n  [0, 1, 2, 4],\r\n  [0, 1, 3, 4],\r\n  [0, 2, 3, 4],\r\n  [1, 2, 3, 4]\r\n]\r\n\r\n/**\r\n  * Converts each card to a simple integer\r\n  * ACE = 1, Facecards = 10\r\n  * @function convertToIntegers\r\n  * @param {Object[]} - Cards in the players hand\r\n  * @returns {number[]} - Array of numbers representing the cards\r\n  */\r\nfunction convertToIntegers(cards) {\r\n  var arrNoSuits = cards.map(card => card.value)\r\n  // change face cards and ace to numbers\r\n  var arrInteger = arrNoSuits.map(function(card) {\r\n    if (isNaN(card)) {\r\n      card = (card === 'ACE') ? 1 : 10\r\n    } else {\r\n      card = parseInt(card, 10)\r\n    }\r\n    return card\r\n  })\r\n  return arrInteger\r\n}\r\n\r\n/**\r\n  * Sorts the cards and adds 'val' property to represent the points value for each card.\r\n  * example: KING = 14, ACE = 1\r\n  * @function sortCards\r\n  *  @param {Object[]} - Cards in the players hand\r\n  *  @returns {Object[]} - Array of cards that are sorted and have numerica value added\r\n  */\r\nfunction sortCards(cards) {\r\n  let copyOfCards = [...cards]\r\n  for (let i = 0; i < cards.length; i++) {\r\n\r\n    switch (copyOfCards[i].value) {\r\n      case 'ACE':\r\n        copyOfCards[i].val = 1;\r\n        break;\r\n      case 'JACK':\r\n        copyOfCards[i].val = 11;\r\n        break;\r\n      case 'QUEEN':\r\n        copyOfCards[i].val = 12;\r\n        break;\r\n      case 'KING':\r\n        copyOfCards[i].val = 13\r\n        break;\r\n      default:\r\n        copyOfCards[i].val = parseInt(copyOfCards[i].value, 10);\r\n    }\r\n  }\r\n  copyOfCards.sort((a, b) => a.val - b.val)\r\n  return copyOfCards\r\n}\r\n\r\n/**\r\n* Returns array of two number pairs of numbers that sum to the target value\r\n* @function twoSum\r\n* @param {number[]} - Array of integers\r\n* @param {number} - Target value that the pairs should sum to\r\n* @return {number[number[]]} Array of pairs of numbers where each number represents the poistion in the hand\r\n* @example [[1,2], [3,5], [4,5]]\r\n*/\r\nfunction twoSum(arr, target = 15) {\r\n  var result = [];\r\n  for (var i = 0; i < arr.length; i++) {\r\n    for (var j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n* Strips the card array down to a simple array of characters\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @return {number[]} - Character value of each card\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction convertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function(card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\n/**\r\n* Checks for a run in a given array of sorted cards\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @param {number[]} - Pattern of cards to check\r\n* @return {bolean} - Run was found. True/False\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction findRun(hand, pattern) {\r\n  let runFound = true\r\n  for (let k = 0; k < pattern.length - 1; k++) {\r\n    let result = hand[pattern[k + 1]].val - hand[pattern[k]].val\r\n    if (result === 1) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n// quick and dirty way to count occurences of a character in an array\r\nfunction countOcurrences(arr, c) {\r\n  let count = 0\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] === c) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n// gets pairs, triplets and quartets of cards in a hand\r\nexport function getPairs(fullHand) {\r\n  //debugger\r\n  // reduce the array to an array of chars\r\n  let charArray = convertToChars(fullHand)\r\n  // creating aset removes duplicates.\r\n  const uniqueSet = new Set(charArray)\r\n  // turn set back to array so that we have an\r\n  // array of unique values in the hand\r\n  const uniqueValues = [...uniqueSet]\r\n  let finalResult = []\r\n  // looping through 3 values - a, j and 3\r\n  for (let i = 0; i < uniqueValues.length; i++) {\r\n    let result = []\r\n    let occurences = countOcurrences(charArray, uniqueValues[i])\r\n    if (occurences > 1) {\r\n      // get index of each one\r\n      for (let k = 0; k < charArray.length; k++) {\r\n        if (uniqueValues[i] === charArray[k]) {\r\n          result.push(fullHand[k])\r\n        }\r\n      }\r\n      let resultObj = {}\r\n      resultObj.result = result\r\n      let resultLength = result.length\r\n      if (resultLength === 2) {\r\n        resultObj.description = 'Pair'\r\n        resultObj.score = 2\r\n      }\r\n      else if (resultLength === 3) {\r\n        resultObj.description = 'Three of a kind'\r\n        resultObj.score = 6\r\n      } else if (resultLength === 4) {\r\n        resultObj.description = 'Four of a kind'\r\n        resultObj.score = 12\r\n      }\r\n      finalResult.push(resultObj)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport function getFifteenSums(cards) {\r\n  let totalSums = []\r\n  let sumPairs = getFifteenPairs(cards, 15)\r\n  let sumTriplets = getFifteenTriplets(cards, 15)\r\n  let sumQuartets = getFifteenQuartets(cards, 15)\r\n  let sumQuintet = getFifteenQuintet(cards, 15)\r\n\r\n  totalSums = [...sumPairs, ...sumTriplets, ...sumQuartets, ...sumQuintet]\r\n  return totalSums\r\n}\r\n\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\nfunction getFifteenPairs(cardHand, target = 15) {\r\n  // debugger\r\n  let hand = convertToIntegers(cardHand)\r\n  let result = twoSum(hand, target)\r\n  let pairs = []\r\n  for (var i = 0; i < result.length; i++) {\r\n    pairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return pairs\r\n}\r\n\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\nfunction getFifteenTriplets(cardHand, target = 15) {\r\n  let hand = convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0;\r\n  // let intermediateResult = []\r\n  let triplets = []\r\n  for (let j = start + 1; j < hand.length + 2; j++) {\r\n    let result = twoSum(hand, pairTarget)\r\n    for (var p = 0; p < result.length; p++) {\r\n      let temp = [cardHand[j - 1]]\r\n      temp.push(cardHand[result[p][0] + j])\r\n      temp.push(cardHand[result[p][1] + j])\r\n      triplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return triplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\nfunction getFifteenQuartets(cardHand, target = 15) {\r\n  let finalResult = []\r\n  let hand = convertToIntegers(cardHand)\r\n  for (let i = 0; i < hand.length; i++) {\r\n    let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4] - hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i, 1)\r\n      finalResult.push(result)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']\r\n *\r\n */\r\nfunction getFifteenQuintet(cardHand, target = 15) {\r\n  let finalResult = []\r\n  let hand = convertToIntegers(cardHand)\r\n  let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4]\r\n  if (sum === target) {\r\n    finalResult.push(cardHand)\r\n  }\r\n  return finalResult\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\nexport function getFlushes(cardHand) {\r\n  const copyOfHand = [...cardHand]\r\n  // check for five card flush (all suits are equal)\r\n  const checkAllEqual = arr => arr.every(card => card.suit === arr[0].suit)\r\n\r\n  let allEqual = checkAllEqual(copyOfHand)\r\n  if (allEqual) {\r\n    return copyOfHand\r\n  } else { // check for flush in forst four cards\r\n    copyOfHand.pop()\r\n    allEqual = checkAllEqual(copyOfHand)\r\n    if (allEqual) {\r\n      return copyOfHand\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\n// checks if the hand as a Jack that matches the suit of the community card\r\nexport function\r\n  getNibs(cards, card) {\r\n  let communitySuit = card.suit\r\n  let result = []\r\n  for (let i = 0; i < cards.length; i++) {\r\n    if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n      result.push(card)\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n     * Returns sets of three, four or five cards that are sequential ie; a run\r\n     * @param {string[]} cardHand - Array of cardes\r\n     * @return {Array<Array<Card>>} Array of Cards representing a run\r\n     *\r\n     */\r\nexport function getRuns(cardHand) {\r\n  let sortedCards = sortCards(cardHand)\r\n  let runsResult = []\r\n\r\n  let runOf5Found = true\r\n\r\n  // start by looking for runs of 5\r\n  for (let i = 0; i < 4; i++) {\r\n    if (sortedCards[i + 1].val - sortedCards[i].val !== 1) {\r\n      runOf5Found = false\r\n      break\r\n    }\r\n  }\r\n\r\n  // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n  let runOf4Found = false\r\n  if (!runOf5Found) {\r\n    for (let i = 0; i < patternsOfFour.length; i++) {\r\n      if (findRun(sortedCards, patternsOfFour[i])) {\r\n        runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n        runOf4Found = true\r\n      }\r\n    }\r\n  }\r\n  // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  if (!runOf4Found) {\r\n    for (let i = 0; i < patternsOfThree.length; i++) {\r\n      if (findRun(sortedCards, patternsOfThree[i])) {\r\n        runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n        runsResult.description = 'fred'\r\n        runsResult.score = 3\r\n      }\r\n    }\r\n  }\r\n  return runsResult\r\n}\r\n","import React, { Component } from 'react';\r\nimport { getPairs, getFifteenSums, getFlushes, getNibs, getRuns } from './cribbage.js'\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showResults: true }\r\n    // this.personName = 'Fred'\r\n    // all 10 combinations that a run of three can have\r\n    this.patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4],\r\n      [0, 2, 3]\r\n    ]\r\n  }\r\n\r\n  // tallyTheScores(pairResult, fullSumsResult, runsResult, nibsResult) {\r\n  tallyTheScores(pairResult, sumsResult, runsResult, nibsResult) {\r\n    let score = 0\r\n    for (let i = 0; i < pairResult.length; i++) {\r\n      score = score + pairResult[i].score\r\n    }\r\n    for (let i = 0; i < sumsResult.length; i++) {\r\n      score = score + 2\r\n    }\r\n    for (let i = 0; i < runsResult.length; i++) {\r\n      score = score + runsResult[i].length\r\n    }\r\n    if (nibsResult.length > 0) {\r\n      score = score + 1\r\n    }\r\n    return score\r\n  }\r\n\r\n  render() {\r\n    let pairResults = []\r\n    const { cards, card } = this.props\r\n\r\n    let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n    let showResults = this.state.showResults\r\n    let sumsResult, flushResult, runsResult, nibsResult\r\n    let fullHand = [...cards]\r\n    fullHand.push(card)\r\n    let totalScore = 0\r\n\r\n    if (fullHand.length === 5) {\r\n      pairResults = getPairs(fullHand)\r\n      console.log('****** P A I R  T E S T I N G')\r\n      console.log(pairResults)\r\n\r\n      sumsResult = getFifteenSums(fullHand)\r\n      console.log('****** T O T A L   S U M   T E S T I N G  ')\r\n      console.log(sumsResult)\r\n\r\n      //let sumResultQuintet = []\r\n      flushResult = getFlushes(fullHand)\r\n      console.log('****** F L U S H   T E S T I N G   ')\r\n      console.log(flushResult)\r\n\r\n      runsResult = getRuns(fullHand)\r\n      console.log('******  R U N S    T E S T I N G   ')\r\n      console.log('======> runsResult ', runsResult)\r\n      console.log(runsResult)\r\n\r\n      nibsResult = getNibs(cards, card)\r\n      console.log('======> cards: ', cards)\r\n      console.log('======> card: ', card)\r\n      console.log('======> nibsResult ', nibsResult)\r\n      console.log('******  N I B S   T E S T I N G   ')\r\n      console.log(nibsResult)\r\n\r\n      // add all the results of the sums\r\n      // fullSumsResult = [...sumResultPairs, ...sumResultTriplets, ...sumResultQuartets, ...sumResultQuintet]\r\n      totalScore = this.tallyTheScores(pairResults, sumsResult, runsResult, nibsResult)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const showResultsCheckbox = <div className='show-results'>\r\n      <input type='checkbox' inline='true' checked={showResults} onClick={() => { this.setState({ showResults: !showResults }) }} />\r\n      <div>Show results</div>\r\n    </div>\r\n\r\n    // Only show results if the full hand has been dealt\r\n    if (fullHand.length === 5) {\r\n      displayPairs = <div>{pairResults.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{result.result.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>{result.description} - Points: {result.score}</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n\r\n      displaySums = <div>{sumsResult.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{result.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Sum to 15 - Points: 2</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n\r\n      displayRuns = <div>{runsResult.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{result.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Run - Points: {result.length}</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n\r\n      displayNibs = <div>{nibsResult.map(result =>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>\r\n                <img className='result-card' src={result.image} key={result.code} alt={result.code} />\r\n              </div>\r\n              <div className='result-text'>Nibs - Points: 1</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      )}</div>\r\n      if (flushResult.length > 0) {\r\n        displayFlush = <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <ul>\r\n            <div className='result-row'>\r\n              <div className='result-image'>{flushResult.map(card =>\r\n                <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n              )}\r\n              </div>\r\n              <div className='result-text'>Flush - Points: 5</div>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      } else {\r\n        displayFlush = <div />\r\n      }\r\n    }\r\n\r\n\r\n    if (fullHand.length === 5) {\r\n      return <div>\r\n        <div>{showResultsCheckbox}</div>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <h3>Result: Score = {totalScore}</h3>\r\n        </div>\r\n        {displayPairs}\r\n        {displaySums}\r\n        {displayRuns}\r\n        {displayFlush}\r\n        {displayNibs}\r\n      </div>\r\n    } else {\r\n      return (\r\n        <div>\r\n          {showResultsCheckbox}\r\n          <div>Nothing to display</div>\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\r\nimport Deck from './Deck'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.turnOverCard = this.turnOverCard.bind(this)\r\n    this.getHand = this.getHand.bind(this)\r\n    this.state = {\r\n      'deck': [],\r\n      'cardsLeft': 52\r\n      //'showResults': false\r\n    }\r\n  }\r\n  componentDidMount() {\r\n\r\n    // let test = getScore()\r\n    // console.log('-------------------> test ', test)\r\n    // temporarily removed this to save bandwidth and resue the same deck\r\n    const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        console.log('STATE1111', this.state)\r\n        console.log('BBBBBBB ', result)\r\n        this.setState({\r\n          deck: result,\r\n          cardsLeft: result.remaining\r\n        })\r\n      })\r\n  }\r\n\r\n  turnOverCard(DeckId) {\r\n    // console.log('I am getting first card from the deck: ', DeckId.deck_id)\r\n    const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=1'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        // console.log('GET Crib state', this.state)\r\n        // console.log('GT Crib result ', result)\r\n        //console.log('CCCCCCC ', this)\r\n        // console.log('GET Crib cards', result.cards[0])\r\n        this.setState({\r\n          communityCard: result.cards[0],\r\n          cardsLeft: result.remaining\r\n          //communityCard: {value: '5', code: '5h', image: 'https://deckofcardsapi.com/static/img/5H.png'}\r\n        })\r\n      });\r\n  }\r\n\r\n  // // fake results of a pair\r\n  getHandTemp(DeckId) {\r\n    const results = [\r\n      { value: '4', code: '4d', image: 'https://deckofcardsapi.com/static/img/4D.png', suit: 'DIAMONDS' },\r\n      { value: '2', code: '2c', image: 'https://deckofcardsapi.com/static/img/2C.png', suit: 'CLUBS' },\r\n      { value: '2', code: '2h', image: 'https://deckofcardsapi.com/static/img/2H.png', suit: 'HEARTS' },\r\n      { value: '3', code: '3h', image: 'https://deckofcardsapi.com/static/img/3H.png', suit: 'HEARTS' },\r\n    ]\r\n    this.setState({\r\n      hand: results\r\n    })\r\n  }\r\n\r\n  /*\r\n   * [cards]\r\n   * card.code        eg. JS, AD, 9H\r\n   * card.image       eg.\r\n   * card.cardsImages\r\n   * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n   * card.value       eg. JACK, ACE, 9\r\n   * card.code        eg.\r\n   *\r\n   *\r\n   *\r\n   */\r\n  getHand(DeckId) {\r\n    // console.log('I am getting users hand from the deck: ', DeckId.deck_id)\r\n    const url = 'https://deckofcardsapi.com/api/deck/' + DeckId.deck_id + '/draw/?count=4'\r\n    fetch(url)\r\n      .then(response =>\r\n        response.json()\r\n      )\r\n      .then(result => {\r\n        this.setState({\r\n          hand: result.cards,\r\n          cardsLeft: result.remaining\r\n        })\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { deck_id } = this.state.deck;\r\n    const cardsLeft = this.state.cardsLeft\r\n    let card\r\n    if (this.state.communityCard) {\r\n      card = this.state.communityCard\r\n    } else {\r\n      card = {}\r\n    }\r\n\r\n    let cards\r\n    if (this.state.hand) {\r\n      cards = this.state.hand\r\n    } else {\r\n      cards = []\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Cribbage Hand Tester</h1>\r\n        <p>Guess how many points this hand is worth.</p>\r\n        <div className='result-row'>\r\n          <div className='full-hand-cards'>\r\n            <Hand deck_id={deck_id} getHand={this.getHand} cardsLeft={cardsLeft} cards={cards} />\r\n          </div>\r\n          <div className='full-hand-community-card'>\r\n            <Deck deck_id={deck_id} turnOverCard={this.turnOverCard} card={card} />\r\n          </div>\r\n        </div>\r\n        <Results cards={cards} card={card} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}